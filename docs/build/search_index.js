var documenterSearchIndex = {"docs":
[{"location":"functions.html#Defaults","page":"Functions","title":"Defaults","text":"","category":"section"},{"location":"functions.html","page":"Functions","title":"Functions","text":"Modules = [Defaults]\nOrder   = [:function]","category":"page"},{"location":"functions.html#JAC.Defaults.convertUnits-Tuple{String, Float64}","page":"Functions","title":"JAC.Defaults.convertUnits","text":"Defaults.convertUnits()       ... converts some data from one format/unit into another one; cf. the supported keystrings and return values.\n\n(\"cross section: from atomic to predefined unit\", value::Float64)  or  (\"cross section: from atomic\", value::Float64)     ... to convert an cross section value from atomic to the predefined cross section unit; a Float64 is returned.\n(\"cross section: from barn to atomic unit\", value::Float64)    ... to convert an cross section value from barn atomic section unit; a Float64 is returned.\n(\"cross section: from atomic to barn\", value::Float64)  or  (\"cross section: from atomic to Mbarn\", value::Float64)  or   (\"cross section: from atomic to cm^2\", value::Float64)    ... to convert an energy value from atomic to the speficied cross section unit; a Float64 is returned.\n(\"cross section: from predefined to atomic unit\", value::Float64)  or  (\"cross section: to atomic\", value::Float64)   ... to convert a cross section value from the predefined to the atomic cross section unit; a Float64 is returned.\n(\"einstein B: from atomic\", value::Float64)     ... to convert a Einstein B coefficient from atomic to the speficied energy units; a Float64 is returned.\n(\"density: from [g/cm^3] to atomic\", value::Float64)     ... to convert a mass density from [g/cm^3] to atomic units [u/a_o^3]; a Float64 is returned.\n(\"energy-diff. cross section: from atomic to predefined unit\", value::Float64)  or     (\"energy-diff. cross section: from atomic\", value::Float64)     ... to convert an energy-diff. cross section value from atomic to the predefined energy-diff. cross section unit;        a Float64 is returned.\n(\"energy: from atomic to eV\", value::Float64)  or  (\"energy: from atomic to Kayser\", value::Float64)    or   (\"energy: from atomic to Hz\", value::Float64)  or  (\"energy: from atomic to Angstrom\", value::Float64)  or   (\"energy: from atomic to Ws\", value::Float64)   ... to convert an energy value from atomic to the speficied energy unit; a Float64 is returned.\n(\"energy: from predefined to atomic unit\", value::Float64)  or  (\"energy: to atomic\", value::Float64)... to convert an energy value                                                from the predefined to the atomic energy unit; a Float64 is returned.\n(\"energy: from eV to atomic\", value::Float64) ... to convert an energy value from eV to the atomic energy unit; a Float64 is returned.\n(\"energy: from wavelength [nm] to atomic\", value::Float64) ... to convert a wavelength [nm] to the atomic energy unit; a Float64 is returned.\n(\"intensity: from W/cm^2 to atomic\", value::Float64) ... to convert the intensity [in W/cm^2] to the atomic intensity unit; a Float64 is returned.\n(\"kinetic energy to wave number: atomic units\", value::Float64)  ... to convert a kinetic energy value (in a.u.) into a wave number                                               k (a.u.); a Float64 is returned.\n(\"kinetic energy to wavelength: atomic units\", value::Float64)  ... to convert a kinetic energy value (in a.u.) into a wavelength (a.u.);                                                a Float64 is returned.\n(\"length: from fm to atomic\", value::Float64)  ... to convert a length value (in fm) into a.u.;  a Float64 is returned.\n(\"length: from atomic to fm\", value::Float64)  or  (\"energy: from atomic to Kayser\", value::Float64)     ... to convert a length value (in Bohr's a.u.) to the speficied length unit;  a Float64 is returned.\n(\"rate: from atomic to predefined unit\", value::Float64)  or  (\"rate: from atomic\", value::Float64)  ... to convert a rate value                                            from atomic to the predefined rate unit; a Float64 is returned.\n(\"rate: from atomic to 1/s\", value::Float64)  ... to convert an rate value from atomic to the speficied rate unit; a Float64 is returned.\n(\"rate: from predefined to atomic unit\", value::Float64)  or  `(\"rate: to atomic\", value::Float64)'... to convert a                                               rate value from the predefined to the atomic rate unit; a Float64 is returned.\n\n(\"strength: from atomic to predefined unit\", value::Float64)  or  (\"strength: from atomic\", value::Float64)  ... to convert a (resonance)                                                strength value from atomic to the predefined rate unit; a Float64 is returned.\n(\"time: from atomic to predefined unit\", value::Float64)  or  (\"time: from atomic\", value::Float64)  ... to convert an time value                                            from atomic to the predefined time unit; a Float64 is returned.\n(\"time: from atomic to sec\", value::Float64)  or  (\"time: from atomic to fs\", value::Float64)'  or(\"time: from atomic to as\", value::Float64)`  ... to convert a time value from atomic to the speficied time unit; a Float64 is returned.\n(\"time: from predefined to atomic unit\", value::Float64)  or  `(\"time: to atomic\", value::Float64)'  ... to convert a                                           time value from the predefined to the atomic time unit; a Float64 is returned.\n(\"temperature: from Kelvin to (Hartree) units\", value::Float64)  ... to convert a temperature in Kelvin into atomic (Hartree) units;                                                a Float64 is returned.\n(\"temperature: from atomic to Kelvin\", value::Float64)  ... to convert an atomic (energy) unit into Kelvin; 1 Hartree = 315774.64 K;                                                a Float64 is returned.\n(\"wave number to total electron energy: atomic units\", value::Float64)  ... to convert a wavenumber (a.u.) into the total electron                                           energy, including the rest energy; a Float64 is returned.\n(\"wave number to kinetic energy: atomic units\", value::Float64)  ... to convert a wavenumber (a.u.) into the kinetic energy;                                            a Float64 is returned.\n\n\n\n\n\n","category":"method"},{"location":"functions.html#JAC.Defaults.convertUnits-Tuple{String, Vector{Float64}}","page":"Functions","title":"JAC.Defaults.convertUnits","text":"(string, values::Array{Float64,1})     ... to convert for the same strings as above but for an list of values; a corresponding Array{Float64,1} is returned.\n\n\n\n\n\n","category":"method"},{"location":"functions.html#JAC.Defaults.getDefaults-Tuple{String, Int64}","page":"Functions","title":"JAC.Defaults.getDefaults","text":"(\"ordered shell list: non-relativistic\", n_max::Int64)     ... to give an ordered list of non-relativistic shells::Array{Shell,1} up to the (maximum) principal number n_max.\n(\"ordered subshell list: relativistic\", n_max::Int64)      ... to give an ordered list of relativistic subshells::Array{Subshell,1} up to the (maximum) principal number n_max.\n\n\n\n\n\n","category":"method"},{"location":"functions.html#JAC.Defaults.getDefaults-Tuple{String}","page":"Functions","title":"JAC.Defaults.getDefaults","text":"Defaults.getDefaults()       ... gives/supplies different information about the (present) framework of the computation or about some          given data; cf. Defaults.setDefaults(). \n\n(\"alpha\")  or  (\"fine-structure constant alpha\")      ... to get the (current) value::Float64 of the fine-structure constant alpha.\n(\"electron mass: kg\")  or  (\"electron mass: amu\")     ... to get the (current) value::Float64 of the electron mass in the specified unit.\n(\"framework\")  ... to give the (current) setting::String  of the overall framework.\n(\"electron rest energy\")  or  (\"mc^2\")  ... to get the electron rest energy.\n(\"electron g-factor\")  ... to give the electron g-factor g_s = 2.00232.\n(\"unit: energy\")  or  (\"unit: cross section\")  or  (\"unit: rate\")  or  (\"unit: strength\")  or  (\"unit: time\")     ... to get the corresponding (user-defined) unit::String for the current computations.\n(\"standard grid\")     ... to get the (current standard) grid::Array{Float64,1} to which all radial orbital functions usually refer.\n(\"speed of light: c\")  ... to get the speed of light in atomic units.\n(\"summary flag/stream\")     ... to get the logical flag and stream for printing a summary file; a tupel (flag, iostream) is returned.\n\n\n\n\n\n","category":"method"},{"location":"functions.html#JAC.Defaults.saRatip-Tuple{}","page":"Functions","title":"JAC.Defaults.saRatip","text":"Defaults.saRatip()       ... returns true or false if the spin-angular coefficients should be calculated by Fortran codes from RATIP/Grasp.\n\n\n\n\n\n","category":"method"},{"location":"functions.html#JAC.Defaults.setDefaults-Tuple{String, Float64, Vector{Float64}}","page":"Functions","title":"JAC.Defaults.setDefaults","text":"(\"QED: damped-hydrogenic\", Znuc::Float64, wa::Array{Float64,1})     ... to (re-) define the lambda-C damped overlap integrals of the lowest kappa-orbitals        [ wa1s1/2, wa2p1/2, wa2p3/2, wa3d3/2, wa3d5/2 ] for the (new) nuclear charge Znuc;        nothing is returned.\n\n\n\n\n\n","category":"method"},{"location":"functions.html#JAC.Defaults.setDefaults-Tuple{String, JAC.Basics.AbstractScField}","page":"Functions","title":"JAC.Defaults.setDefaults","text":"(\"continuum: potential\", scField::Basics.AbstractScField)     ... to (re-) define the potential that is applied for the generation of the continuum orbitals.\n\n\n\n\n\n","category":"method"},{"location":"functions.html#JAC.Defaults.setDefaults-Tuple{String, JAC.Radial.Grid}","page":"Functions","title":"JAC.Defaults.setDefaults","text":"(\"standard grid\", grid::Radial.Grid; printout::Bool=true)     ... to (pre-) define internally the standard radial grid which is used to represent most orbitals.\n\n\n\n\n\n","category":"method"},{"location":"functions.html#JAC.Defaults.setDefaults-Tuple{String, Vector{Subshell}}","page":"Functions","title":"JAC.Defaults.setDefaults","text":"(\"relativistic subshell list\", subshells::Array{Subshell,1}; printout::Bool=true)     ... to (pre-) define internally the standard relativistic subshell list on which the standard order of orbitals is based.\n\n\n\n\n\n","category":"method"},{"location":"functions.html#JAC.Defaults.setDefaults-Tuple{String}","page":"Functions","title":"JAC.Defaults.setDefaults","text":"Defaults.setDefaults()       ... (re-) defines some 'standard' settings which are common to all the computations with the JAC module, and which can          be 'overwritten' by the user. –- An improper setting of some variable may lead to an error message, if recognized         immediately. The following defaults apply if not specified otherwise by the user: the framework is 'relativistic',          energies are given in eV and cross sections in barn. Note that, internally, atomic units are used throughout for          all the computations within the program. nothing is returned if not indicated otherwise.\n\n+ (\"framework: relativistic\")  or  (\"framework: non-relativistic\")\n\n... to define a relativistic or non-relativistic framework for all subsequent computations.\n\n(\"method: continuum, spherical Bessel\")  or  (\"method: continuum, pure sine\")  or     (\"method: continuum, asymptotic Coulomb\")  or  (\"method: continuum, nonrelativistic Coulomb\")  or     (\"method: continuum, Galerkin\")     ... to define a a method for the generation of the continuum orbitals as (pure) spherical Bessel, pure sine,       asymptotic Coulomb, nonrelativistic Coulomb orbital or by means of the B-spline-Galerkin method.\n(\"method: normalization, pure sine\")  or  (\"method: normalization, pure Coulomb\")  or  (\"method: normalization, Ong-Russek\")      ... to define a method for the normalization of the continuum orbitals as asymptotically (pure) sine or Coulomb        functions, or following the procedure by Ong & Russek (1978).\n(\"QED model: Petersburg\")  or  (\"QED model: Sydney\")      ... to define a model for the computation of the QED corrections following the work by Shabaev et al. (2011; Petersburg)        or Flambaum and Ginges (2004; Syney).\n(\"unit: energy\", \"eV\")  or  (\"unit: energy\", \"Kayser\")  or  (\"unit: energy\", \"Hartree\")  or     (\"unit: energy\", \"Hz\")  or  (\"unit: energy\", \"Hz\")     ... to (pre-) define the energy units for all further printouts and communications with the JAC module.\n(\"unit: cross section\", \"a.u.\")  or  (\"unit: cross section\", \"barn\")  or  (\"unit: cross section\", \"Mbarn\")     ... to (pre-) define the unit for the printout of cross sections.\n(\"unit: rate\", \"a.u.\")  or  (\"unit: rate\", \"1/s\")  ... to (pre-) define the unit for the printout of rates.\n(\"unit: resonance strength\", \"a.u.\")  or  (\"unit: resonance strength\", \"barn eV\")  or     (\"unit: resonance strength\", \"cm^2 eV\")  ... to (pre-) define the unit for the printout of resonance strengths.\n(\"unit: time\", \"a.u.\")  or  (\"unit: time\", \"sec\")  or  (\"unit: time\", \"fs\")  or  (\"unit: time\", \"as\")     ... to (pre-) define the unit for the printout and communications of times with the JAC module.\n\n\n\n\n\n","category":"method"},{"location":"functions.html#JAC.Defaults.warn-Tuple{JAC.Basics.AbstractWarning}","page":"Functions","title":"JAC.Defaults.warn","text":"Defaults.warn()       ... deals with warnings that occur during a run and session; it handles the global array GBL_WARNINGS.\n\n(AddWarning, warning::String)  ... to add warning to the global array GBL_WARNINGS.\n(PrintWarnings)  ... to print all warnings that are currently kept in the global array GBL_WARNINGS.\n(ResetWarnings)  ... to reset the global array GBL_WARNINGS.\n\n\n\n\n\n","category":"method"},{"location":"functions.html#JAC.Radial","page":"Functions","title":"JAC.Radial","text":"","category":"section"},{"location":"functions.html","page":"Functions","title":"Functions","text":"Modules = [Radial]\nOrder   = [:function]","category":"page"},{"location":"functions.html#JAC.Radial.OrbitalBunge1993-Tuple{Subshell, Int64, JAC.Radial.Grid}","page":"Functions","title":"JAC.Radial.OrbitalBunge1993","text":"Radial.OrbitalBunge1993(subshell::Subshell, Z::Int64)  ... to calculate the radial orbital on the standard grid.\n\n\n\n\n\n","category":"method"},{"location":"functions.html#JAC.Radial.OrbitalPrimitiveSlater-Tuple{Subshell, Int64, Float64, Float64, JAC.Radial.Grid}","page":"Functions","title":"JAC.Radial.OrbitalPrimitiveSlater","text":"Radial.OrbitalPrimitiveSlater(subshell::Subshell, N::Int64, alpha0::Float64, beta0::Float64, grid::Radial.Grid)       ... to calculate a list of (non-relativistic) radial Slater primitives::Array{Orbital,1} for the subshell-symmetry on          the given grid. All orbitals have the same subshell, isBound = true, useStandardGrid = true and energy = 0.          The small components are constructed by applying kinetic balance to the large component, and all the primitives are          properly normalized.\n\n\n\n\n\n","category":"method"},{"location":"functions.html#JAC.Radial.checkGrid-Tuple{JAC.Radial.Grid, Shell, Float64}","page":"Functions","title":"JAC.Radial.checkGrid","text":"Radial.checkGrid(grid::Radial.Grid, shell::Shell, Z::Float64)       ... checks that the radial grid can represent the hydrogenic orbitals for the given subshell          of nuclear charge Z; it simply tests that the boxSize > 4 * n^2 / Z [a_o].         (More accurate one could use the mean expectation values of r of this shell).         The program reports about this comparison and terminates if this is not the case. Nothing is returned.\n\n\n\n\n\n","category":"method"},{"location":"functions.html#JAC.Radial.checkGrid-Tuple{JAC.Radial.Grid, Subshell, Float64}","page":"Functions","title":"JAC.Radial.checkGrid","text":"Radial.checkGrid(grid::Radial.Grid, subshell::Subshell, relAccuracy::Float64)       ... checks that the radial grid can represent the hydrogenic orbitals for the given subshell with         a relative accuracy <= relAccuracy. The program reports about the relative accuracy and terminates with an          error message if this is not the case. Nothing is returned.\n\n\n\n\n\n","category":"method"},{"location":"functions.html#JAC.Radial.compute_McLean1981-Tuple{Subshell, Int64}","page":"Functions","title":"JAC.Radial.compute_McLean1981","text":"Radial.OrbitalMcLean1981(subshell::Subshell,Z::Int64)  ... to calculate the radial orbital on the standard grid.  \n\n\n\n\n\n","category":"method"},{"location":"functions.html#JAC.Radial.determineGrid-Tuple{JAC.Radial.Grid}","page":"Functions","title":"JAC.Radial.determineGrid","text":"Radial.determineGrid(grid::Radial.Grid; printout::Bool=false)       ... determines the detailed radial grid due to the given gridType and parameters; a gr::Radial.Grid is returned\n\n\n\n\n\n","category":"method"},{"location":"functions.html#JAC.Radial.determineNoPoints-Tuple{Float64, Float64, Float64, Float64, Int64}","page":"Functions","title":"JAC.Radial.determineNoPoints","text":"Radial.determineNoPoints(rnt::Float64, h::Float64, hp::Float64, rbox::Float64, orderGL::Int64)       ... determines the number of points of the physical size if the grid parameters and the box-size is given; moreover,         it is ensured that this NoPoints is consistent with the largest break point for the B-spline grid.         An NoPoints::Int64 is returned.\n\n\n\n\n\n","category":"method"},{"location":"functions.html#JAC.Radial.determineZbar-Tuple{JAC.Radial.Potential}","page":"Functions","title":"JAC.Radial.determineZbar","text":"Radial.determineZbar(pot::Radial.Potential)       ... determines the effective charge that is asymptotically seen by the electron in the potential pot.          A Zbar::Float64 is returned.\n\n\n\n\n\n","category":"method"},{"location":"functions.html#JAC.Radial.generateGrid-Tuple{JAC.Radial.Grid}","page":"Functions","title":"JAC.Radial.generateGrid","text":"`Radial.generateGrid(grid::Radial.Grid; boxSize::Union{Nothing,Float64}=nothing,                                          maximumFreeElectronEnergy::Union{Nothing,Float64}=nothing,                                          maximumPrincipalQN::Union{Nothing,Int64}=nothing,                                          NoPointsInsideNucleus::Union{Nothing,Int64}=nothing,                                          NoPointsInsideFirstBohrRadius::Union{Nothing,Int64}=nothing)\n\n... to generate a grid that fulfills special requirements; th following schemes are supported:\n\n    boxSize \n        ... apply a fixed box size (in atomic units) as needed in an average-atom model and elsewhere.\n    boxSizeWithZeroWeights \n        ... apply a fixed box size (in atomic units) as needed in an average-atom model and elsewhere.\n            Here, a standard grid is used but with all weights w [r] = 0 for r > boxSize.\n    maximumFreeElectronEnergy\n        ... provide a maximum free-electron energy (Hartree) and determine the linearized stepsize such,\n            that 20 points per wavelength are used asymptotically.\n    maximumPrincipalQN\n        ... generate an grid with a rbox-size that is suitable to represent subshell orbitals\n            with the given n; the value of rbox = 5 * <r_n> is taken, i.e. 5 times the mean hydrogenic \n            value (not yet).\n    NoPointsInsideNucleus\n        ... generate a grid (of given type) with the given number inside the nucleus; this affects the values\n            of rnt and h (not yet).\n    NoPointsInsideFirstBohrRadius\n        ... generate a grid (of given type) with the given number inside the first Bohr radius; this affects \n            the values of rnt and h (not yet).\n\nOnly on of these optional parameters can be selected at a given time. A proper grid::Radial.Grid is returned,\nalong with a short reasoning of what has been selected.\n\n\n\n\n\n","category":"method"},{"location":"functions.html#JAC.ImpactExcitation","page":"Functions","title":"JAC.ImpactExcitation","text":"","category":"section"},{"location":"functions.html","page":"Functions","title":"Functions","text":"Modules = [ImpactExcitation]\nOrder   = [:function]","category":"page"},{"location":"functions.html#JAC.ImpactExcitation.amplitude-Tuple{AbstractEeInteraction, JAC.ImpactExcitation.Channel, Level, Level, JAC.Radial.Grid}","page":"Functions","title":"JAC.ImpactExcitation.amplitude","text":"ImpactExcitation.amplitude(kind::AbstractEeInteraction, channel::ImpactExcitation.Channel, cFinalLevel::Level, cInitialLevel::Level,                              grid::Radial.Grid; printout::Bool=true)       ... to compute the kind in  CoulombInteraction(), BreitInteraction(), CoulombBreit() electron-impact interaction amplitude          <(alphaf Jf, kappaf) Jt || O^(e-e, kind) || (alphai Ji, kappai) Jt>  due to the interelectronic interaction for          the given final and initial (continuum) level. A value::ComplexF64 is returned.\n\n\n\n\n\n","category":"method"},{"location":"functions.html#JAC.ImpactExcitation.computeAmplitudesProperties-Tuple{JAC.ImpactExcitation.Line, Model, JAC.Radial.Grid, JAC.ImpactExcitation.Settings}","page":"Functions","title":"JAC.ImpactExcitation.computeAmplitudesProperties","text":"ImpactExcitation.computeAmplitudesProperties(line::ImpactExcitation.Line, nm::Nuclear.Model, grid::Radial.Grid,                                                  settings::ImpactExcitation.Settings; printout::Bool=true)       ... to compute all amplitudes and properties of the given line; a line::ImpactExcitation.Line is returned for which      the amplitudes and properties are now evaluated.\n\n\n\n\n\n","category":"method"},{"location":"functions.html#JAC.ImpactExcitation.computeEffStrengths-Tuple{Vector{JAC.ImpactExcitation.Line}, JAC.ImpactExcitation.Settings}","page":"Functions","title":"JAC.ImpactExcitation.computeEffStrengths","text":"ImpactExcitation.computeEffStrengths(lines::Array{ImpactExcitation.Line, 1}, settings::ImpactExcitation.Settings)     ... computes Effective collision strengths from the calculated line collision strengths at temperature(s) [K].         Returns an Array{ImpactExcitation.RateCoefficients,1}.\n\n\n\n\n\n","category":"method"},{"location":"functions.html#JAC.ImpactExcitation.computeLines-Tuple{Multiplet, Multiplet, Model, JAC.Radial.Grid, JAC.ImpactExcitation.Settings}","page":"Functions","title":"JAC.ImpactExcitation.computeLines","text":"ImpactExcitation.computeLines(finalMultiplet::Multiplet, initialMultiplet::Multiplet, nm::Nuclear.Model, grid::Radial.Grid,                                  settings::ImpactExcitation.Settings; output=true)       ... to compute the electron-impact excitation transition amplitudes and all properties as requested by the given settings.          A list of lines::Array{ImpactExcitation.Lines} is returned.\n\n\n\n\n\n","category":"method"},{"location":"functions.html#JAC.ImpactExcitation.computeRateCoefficients-Tuple{Vector{JAC.ImpactExcitation.Line}, JAC.ImpactExcitation.Settings}","page":"Functions","title":"JAC.ImpactExcitation.computeRateCoefficients","text":"ImpactExcitation.computeRateCoefficients(effStrengths::Vector{RateCoefficients}, settings::ImpactExcitation.Settings)     ... computes Exitation rate coefficients from the calculated collsion strengths at a temperature(s) [K].         The rate coefficients are returned in [cm^3/s]. Returns an Array{ImpactExcitation.RateCoefficients,1}.\n\n\n\n\n\n","category":"method"},{"location":"functions.html#JAC.ImpactExcitation.determineChannels-Tuple{Level, Level, JAC.ImpactExcitation.Settings}","page":"Functions","title":"JAC.ImpactExcitation.determineChannels","text":"ImpactExcitation.determineChannels(finalLevel::Level, initialLevel::Level, settings::ImpactExcitation.Settings)       ... to determine a list of electron-impact excitation Channels for a transitions from the initial to the final level and by          taking into account the particular settings of for this computation; an Array{ImpactExcitation.Channel,1} is returned.\n\n\n\n\n\n","category":"method"},{"location":"functions.html#JAC.ImpactExcitation.determineLines-Tuple{Multiplet, Multiplet, JAC.ImpactExcitation.Settings}","page":"Functions","title":"JAC.ImpactExcitation.determineLines","text":"ImpactExcitation.determineLines(finalMultiplet::Multiplet, initialMultiplet::Multiplet, settings::ImpactExcitation.Settings)       ... to determine a list of ImpactExcitation.Line's for transitions between levels from the initial- and final-state multiplets,          and by taking into account the particular selections and settings for this computation; an Array{ImpactExcitation.Line,1} is          returned. Apart from the level specification, all physical properties are set to zero during the initialization process.\n\n\n\n\n\n","category":"method"},{"location":"functions.html#JAC.ImpactExcitation.displayLines-Tuple{Vector{JAC.ImpactExcitation.Line}}","page":"Functions","title":"JAC.ImpactExcitation.displayLines","text":"ImpactExcitation.displayLines(lines::Array{ImpactExcitation.Line,1})       ... to display a list of lines and channels that have been selected due to the prior settings. A neat table of all          selected transitions and energies is printed but nothing is returned otherwise.\n\n\n\n\n\n","category":"method"},{"location":"functions.html#JAC.ImpactExcitation.displayResults-Tuple{JAC.ImpactExcitation.Line}","page":"Functions","title":"JAC.ImpactExcitation.displayResults","text":"ImpactExcitation.displayResults(line::ImpactExcitation.Line)     ... to display energies, cross sections, collision stregths, convergence etc. for a single line immediatly after         the calculation for that line is completed.\n\n\n\n\n\n","category":"method"},{"location":"functions.html#JAC.ImpactExcitation.displayResults-Tuple{Vector{JAC.ImpactExcitation.Line}}","page":"Functions","title":"JAC.ImpactExcitation.displayResults","text":"ImpactExcitation.displayResults(lines::Array{ImpactExcitation.Line,1})       ... to list all results, energies, cross sections, etc. of the selected lines. A neat table is printed but nothing is          returned otherwise.\n\n\n\n\n\n","category":"method"},{"location":"functions.html#JAC.ImpactExcitation.displayResults-Tuple{Vector{JAC.ImpactExcitation.RateCoefficients}}","page":"Functions","title":"JAC.ImpactExcitation.displayResults","text":"ImpactExcitation.displayResults(allRates::Array{RateCoefficients,1})       ... to list the excitation rate coefficients and effective collision strengths for the selected lines at the selected temperatures.         A neat table is printed but nothing is returned otherwise.\n\n\n\n\n\n","category":"method"},{"location":"functions.html#JAC.ImpactExcitation.groupLines-Tuple{Vector{JAC.ImpactExcitation.Line}, JAC.ImpactExcitation.Settings}","page":"Functions","title":"JAC.ImpactExcitation.groupLines","text":"ImpactExcitation.groupLines(lines::Array{ImpactExcitation.Line,1}, settings::ImpactExcitation.Settings)     ... groups lines having the same initial and final level but different energies         returns an Array{Array{ImpactExcitation.Line,1},1}\n\n\n\n\n\n","category":"method"},{"location":"functions.html#JAC.ImpactExcitation.groupLines-Tuple{Vector{JAC.ImpactExcitation.Line}}","page":"Functions","title":"JAC.ImpactExcitation.groupLines","text":"ImpactExcitation.groupLines(lines::Array{ImpactExcitation.Line,1})     ... groups lines having the same initial and final level but different energies         returns an Array{Array{ImpactExcitation.Line,1},1}\n\n\n\n\n\n","category":"method"},{"location":"functions.html#JAC.ImpactExcitation.interpolateCS-Tuple{Float64, Vector{Float64}, Vector{Float64}, Bool}","page":"Functions","title":"JAC.ImpactExcitation.interpolateCS","text":"ImpactExcitation.interpolateCS(x::Float64, xa::Vector{Float64}, ya::Vector{Float64}, isE1Allowed::Bool)     ... interpolates the cross section or collision stregths for a given initial electron Energy         if the energy is beyond the upper bound then uses asymptotic approximation for extrapolation,         depending on the transition is E1 allowed or not.         Returns a Float64.\n\n\n\n\n\n","category":"method"},{"location":"functions.html#JAC.ImpactExcitation.interpolateCS-Tuple{Float64, Vector{Float64}, Vector{Float64}}","page":"Functions","title":"JAC.ImpactExcitation.interpolateCS","text":"ImpactExcitation.interpolateCS(x::Float64, xa::Vector{Float64}, ya::Vector{Float64})     ... interpolates the cross section or collision stregths for a given initial electron Energy         returns a Float64.\n\n\n\n\n\n","category":"method"},{"location":"functions.html#JAC.PhotoExcitation","page":"Functions","title":"JAC.PhotoExcitation","text":"","category":"section"},{"location":"functions.html","page":"Functions","title":"Functions","text":"Modules = [PhotoExcitation]\nOrder   = [:function]","category":"page"},{"location":"functions.html#JAC.PhotoExcitation.computeAmplitudesProperties-Tuple{JAC.PhotoExcitation.Line, JAC.Radial.Grid, JAC.PhotoExcitation.Settings}","page":"Functions","title":"JAC.PhotoExcitation.computeAmplitudesProperties","text":"PhotoExcitation.computeAmplitudesProperties(line::PhotoExcitation.Line, grid::Radial.Grid, settings::PhotoExcitation.Settings; printout::Bool=true)       ... to compute all amplitudes and properties of the given line; a line::PhotoExcitation.Line is returned for which          the amplitudes and properties have now been evaluated.\n\n\n\n\n\n","category":"method"},{"location":"functions.html#JAC.PhotoExcitation.computeCrossSection-Tuple{JAC.PhotoExcitation.Line, ExpStokes}","page":"Functions","title":"JAC.PhotoExcitation.computeCrossSection","text":"PhotoExcitation.computeCrossSection(line::PhotoExcitation.Line, stokes::ExpStokes)       ... to compute the excitation cross section for the excitation of unpolarized atoms by plane-wave photons, whose polarization          is described by the given (experimental) Stokes parameters. A cs::EmProperty is returned.\n\n\n\n\n\n","category":"method"},{"location":"functions.html#JAC.PhotoExcitation.computeLines-Tuple{Multiplet, Multiplet, JAC.Radial.Grid, JAC.PhotoExcitation.Settings}","page":"Functions","title":"JAC.PhotoExcitation.computeLines","text":"PhotoExcitation.computeLines(finalMultiplet::Multiplet, initialMultiplet::Multiplet, grid::Radial.Grid,                                      settings::PhotoExcitation.Settings; output=true)       ... to compute the photo-excitation amplitudes and all properties as requested by the given settings. A list          of lines::Array{PhotoExcitation.Lines} is returned.\n\n\n\n\n\n","category":"method"},{"location":"functions.html#JAC.PhotoExcitation.computeLinesCascade-Tuple{Multiplet, Multiplet, JAC.Radial.Grid, JAC.PhotoExcitation.Settings, LevelSelection}","page":"Functions","title":"JAC.PhotoExcitation.computeLinesCascade","text":"PhotoExcitation.computeLinesCascade(finalMultiplet::Multiplet, initialMultiplet::Multiplet, grid::Radial.Grid,                                       settings::PhotoExcitation.Settings, initialLevelSelection::LevelSelection;                                       output::Bool=true, printout::Bool=true)       ... to compute the excitation (absorption) transition amplitudes and all properties as requested by the given settings.          The computations and printout is adapted for larger cascade computations by including only lines with at least one channel          and by sending all printout to a summary file only. A list of lines::Array{PhotoExcitation.Lines} is returned.\n\n\n\n\n\n","category":"method"},{"location":"functions.html#JAC.PhotoExcitation.computeStatisticalTensor-Tuple{Int64, Int64, JAC.PhotoExcitation.Line, ExpStokes}","page":"Functions","title":"JAC.PhotoExcitation.computeStatisticalTensor","text":"PhotoExcitation.computeStatisticalTensor(k::Int64, q::Int64, line::PhotoExcitation.Line, stokes::ExpStokes)       ... to compute the statistical tensor (component) rho{k,q} of the final level for the excitation of unpolarized atoms by          plane-wave photons, whose polarization is described by the given (experimental) Stokes parameters.          A rhokq::EmProperty is returned.\n\n\n\n\n\n","category":"method"},{"location":"functions.html#JAC.PhotoExcitation.determineChannels-Tuple{Level, Level, JAC.PhotoExcitation.Settings}","page":"Functions","title":"JAC.PhotoExcitation.determineChannels","text":"PhotoExcitation.determineChannels(finalLevel::Level, initialLevel::Level, settings::PhotoExcitation.Settings)       ... to determine a list of PhotoExcitation.Channel for a transitions from the initial to final level and by taking          into account the particular settings of for this computation; an Array{PhotoExcitation.Channel,1} is returned.\n\n\n\n\n\n","category":"method"},{"location":"functions.html#JAC.PhotoExcitation.determineLines-Tuple{Multiplet, Multiplet, JAC.PhotoExcitation.Settings}","page":"Functions","title":"JAC.PhotoExcitation.determineLines","text":"PhotoExcitation.determineLines(finalMultiplet::Multiplet, initialMultiplet::Multiplet, settings::PhotoExcitation.Settings)       ... to determine a list of photo-excitation Line's for transitions between the levels from the given initial- and          final-state multiplets and by taking into account the particular selections and settings for this computation;          an Array{PhotoExcitation.Line,1} is returned. Apart from the level specification, all physical properties are set to          zero during the initialization process.  \n\n\n\n\n\n","category":"method"},{"location":"functions.html#JAC.PhotoExcitation.displayCrossSections-Tuple{IO, Vector{JAC.PhotoExcitation.Line}, JAC.PhotoExcitation.Settings}","page":"Functions","title":"JAC.PhotoExcitation.displayCrossSections","text":"PhotoExcitation.displayCrossSections(stream::IO, lines::Array{PhotoExcitation.Line,1}, settings::PhotoExcitation.Settings)       ... to list all results, energies, cross sections, etc. of the selected lines. A neat table is printed but nothing          is returned otherwise.\n\n\n\n\n\n","category":"method"},{"location":"functions.html#JAC.PhotoExcitation.displayLineData-Tuple{IO, Vector{JAC.PhotoExcitation.Line}}","page":"Functions","title":"JAC.PhotoExcitation.displayLineData","text":"PhotoExcitation.displayLineData(stream::IO, lines::Array{PhotoExcitation.Line,1})       ... to display the calculated data, ordered by the initial levels and the photon energies involved.         Neat tables of all initial levels and photon energies as well as all associated total cross sections are printed         but nothing is returned otherwise.\n\n\n\n\n\n","category":"method"},{"location":"functions.html#JAC.PhotoExcitation.displayLines-Tuple{IO, Vector{JAC.PhotoExcitation.Line}}","page":"Functions","title":"JAC.PhotoExcitation.displayLines","text":"PhotoExcitation.displayLines(stream::IO, lines::Array{PhotoExcitation.Line,1})       ... to display a list of lines and channels that have been selected due to the prior settings. A neat table of all          selected transitions and energies is printed but nothing is returned otherwise.\n\n\n\n\n\n","category":"method"},{"location":"functions.html#JAC.PhotoExcitation.estimateCrossSection-Tuple{Vector{JAC.PhotoExcitation.Line}, Float64, Float64, Any}","page":"Functions","title":"JAC.PhotoExcitation.estimateCrossSection","text":"PhotoExcitation.estimateCrossSection(lines::Array{PhotoExcitation.Line,1}, omega::Float64, gamma::Float64, initialLevel)       ... to estimate from lines the total PE cross section for any omega and for initial level.          The procedure assumes a Gaussian line shape for each PhotoExcitation.Line with widths gamma and distributes         the (total cross section according to the line shape within [Er - 10*gamma, Er + 10*gamma].         Other line shapes can be readily implemented; a cross section cs::EmProperty is returned.\n\n\n\n\n\n","category":"method"},{"location":"functions.html#JAC.PhotoIonization","page":"Functions","title":"JAC.PhotoIonization","text":"","category":"section"},{"location":"functions.html","page":"Functions","title":"Functions","text":"Modules = [PhotoIonization]\nOrder   = [:function]","category":"page"},{"location":"functions.html#JAC.PhotoIonization.amplitude-Tuple{String, JAC.PhotoIonization.Channel, Float64, Level, Level, JAC.Radial.Grid}","page":"Functions","title":"JAC.PhotoIonization.amplitude","text":"PhotoIonization.amplitude(kind::String, channel::PhotoIonization.Channel, omega::Float64, continuumLevel::Level,                                  initialLevel::Level, grid::Radial.Grid)       ... to compute the kind = (photoionization) amplitude  <(alphaf Jf, epsilon kappa) Jt || O^(photoionization) || alphai J_i>           due to the electron-photon interaction for the given final and initial level, the partial wave of the outgoing          electron as well as the given multipole and gauge. A value::ComplexF64 is returned.\n\n\n\n\n\n","category":"method"},{"location":"functions.html#JAC.PhotoIonization.angularFunctionK-Tuple{Int64, Int64, Int64, AngularJ64, AngularJ64, Int64, AngularJ64, Int64, AngularJ64}","page":"Functions","title":"JAC.PhotoIonization.angularFunctionK","text":"PhotoIonization.angularFunctionK(L1::Int64, L2::Int64, X::Int64, Ji::AngularJ64, Jf::AngularJ64,                                    kappa1::Int64, J1::AngularJ64, kappa2::Int64, J2::AngularJ64)       ... to compute angular function K(...) as defined for the non-E1 angle-differential cross sections by         Nishita Hosea (2025). No tests are made that the triangular conditions of the quantum numbers         are fulfilled. A wa::Float64 is returned.\n\n\n\n\n\n","category":"method"},{"location":"functions.html#JAC.PhotoIonization.angularFunctionW-Tuple{Float64, Int64, Int64, Int64, Int64, Int64, Int64, Rational{Int64}, Int64, Rational{Int64}}","page":"Functions","title":"JAC.PhotoIonization.angularFunctionW","text":"PhotoIonization.angularFunctionW(theta::Float64, L1::Int64, L2::Int64, X::Int64, lambda1::Int64, lambda2::Int64,                                   kappa1::Int64, mu1::Rational{Int64}, kappa2::Int64, mu2::Rational{Int64})       ... to compute angular function W(theta; ...) as defined for the non-E1 angle-differential cross sections by         Nishita Hosea (2025). No tests are made that the triangular conditions of the quantum numbers         are fulfilled. A  wa::Float64 is returned.\n\n\n\n\n\n","category":"method"},{"location":"functions.html#JAC.PhotoIonization.computeAmplitudesProperties-Tuple{JAC.PhotoIonization.Line, Model, JAC.Radial.Grid, Int64, JAC.PhotoIonization.Settings}","page":"Functions","title":"JAC.PhotoIonization.computeAmplitudesProperties","text":"PhotoIonization.computeAmplitudesProperties(line::PhotoIonization.Line, nm::Nuclear.Model, grid::Radial.Grid, nrContinuum::Int64,                                                      settings::PhotoIonization.Settings; printout::Bool=false)       ... to compute all amplitudes and properties of the given line; a line::PhotoIonization.Line is returned for which the amplitudes and          properties are now evaluated.\n\n\n\n\n\n","category":"method"},{"location":"functions.html#JAC.PhotoIonization.computeAmplitudesPropertiesPlasma-Tuple{JAC.PhotoIonization.Line, Model, JAC.Radial.Grid, JAC.PhotoIonization.PlasmaSettings}","page":"Functions","title":"JAC.PhotoIonization.computeAmplitudesPropertiesPlasma","text":"PhotoIonization.computeAmplitudesPropertiesPlasma(line::PhotoIonization.Line, nm::Nuclear.Model, grid::Radial.Grid,                                                     settings::PhotoIonization.PlasmaSettings)       ... to compute all amplitudes and properties of the given line but for the given plasma model;          a line::PhotoIonization.Line is returned for which the amplitudes and properties are now evaluated.\n\n\n\n\n\n","category":"method"},{"location":"functions.html#JAC.PhotoIonization.computeAngularBeta-Tuple{Level, Level, Vector{JAC.PhotoIonization.Channel}}","page":"Functions","title":"JAC.PhotoIonization.computeAngularBeta","text":"PhotoIonization.computeAngularBeta(iLevel::Level, fLevel::Level, channels::Array{PhotoIonization.Channel,1})       ... to compute the beta anisotropy parameter for the photoionization transition i -> f with the given channels;         here, the formula from Balashov (1994, Eq. 2.135) has been utilized. A beta::EmProperty parameter is returned.         These (gauge-dependent) beta parameters are set to -9., if no amplitudes are calculated for the given gauge.\n\n\n\n\n\n","category":"method"},{"location":"functions.html#JAC.PhotoIonization.computeDisplayNonE1AngleDifferentialCS-Tuple{IO, Vector{JAC.PhotoIonization.Line}, JAC.PhotoIonization.Settings}","page":"Functions","title":"JAC.PhotoIonization.computeDisplayNonE1AngleDifferentialCS","text":"PhotoIonization.computeDisplayNonE1AngleDifferentialCS(stream::IO, lines::Array{PhotoIonization.Line,1},                                                          settings::PhotoIonization.Settings)       ... to compute & display the non-E1 angle-differential photoionization cross sections for all PhotoIonization.Line's          and at all angles theta as defined in the settings. The general formula by Nishita Hosea (2025) is applied here.         A neat table is printed for each line but nothing is returned otherwise. \n\n\n\n\n\n","category":"method"},{"location":"functions.html#JAC.PhotoIonization.computeLines-Tuple{Multiplet, Multiplet, Model, JAC.Radial.Grid, JAC.PhotoIonization.Settings}","page":"Functions","title":"JAC.PhotoIonization.computeLines","text":"PhotoIonization.computeLines(finalMultiplet::Multiplet, initialMultiplet::Multiplet, nm::Nuclear.Model, grid::Radial.Grid,                                      settings::PhotoIonization.Settings; output::Bool=true)       ... to compute the photoIonization transition amplitudes and all properties as requested by the given settings.          A list of lines::Array{PhotoIonization.Lines} is returned.\n\n\n\n\n\n","category":"method"},{"location":"functions.html#JAC.PhotoIonization.computeLinesCascade-Tuple{Multiplet, Multiplet, Model, JAC.Radial.Grid, JAC.PhotoIonization.Settings, LevelSelection}","page":"Functions","title":"JAC.PhotoIonization.computeLinesCascade","text":"PhotoIonization.computeLinesCascade(finalMultiplet::Multiplet, initialMultiplet::Multiplet, nm::Nuclear.Model, grid::Radial.Grid,                                       settings::PhotoIonization.Settings, initialLevelSelection::LevelSelection;                                       output=true, printout::Bool=true)       ... to compute the photoionization transition amplitudes and all properties as requested by the given settings. The computations         and printout is adapted for large cascade computations by including only lines with at least one channel and by sending         all printout to a summary file only. A list of lines::Array{PhotoIonization.Lines} is returned.\n\n\n\n\n\n","category":"method"},{"location":"functions.html#JAC.PhotoIonization.computeLinesPlasma-Tuple{Multiplet, Multiplet, Model, JAC.Radial.Grid, JAC.PhotoIonization.PlasmaSettings}","page":"Functions","title":"JAC.PhotoIonization.computeLinesPlasma","text":"PhotoIonization.computeLinesPlasma(finalMultiplet::Multiplet, initialMultiplet::Multiplet, nm::Nuclear.Model, grid::Radial.Grid,                                      settings::PhotoIonization.PlasmaSettings; output::Bool=true)       ... to compute the photoIonization transition amplitudes and all properties as requested by the given settings.          A list of lines::Array{PhotoIonization.Lines} is returned.\n\n\n\n\n\n","category":"method"},{"location":"functions.html#JAC.PhotoIonization.computePartialCrossSectionUnpolarized-Tuple{JAC.Basics.EmGauge, AngularM64, JAC.PhotoIonization.Line}","page":"Functions","title":"JAC.PhotoIonization.computePartialCrossSectionUnpolarized","text":"PhotoIonization.computePartialCrossSectionUnpolarized(gauge::EmGauge, Mf::AngularM64, line::PhotoIonization.Line)       ... to compute the partial photoionization cross section for initially unpolarized atoms by unpolarized plane-wave photons.         A value::Float64 is returned.\n\n\n\n\n\n","category":"method"},{"location":"functions.html#JAC.PhotoIonization.computeStatisticalTensorUnpolarized-Tuple{Int64, Int64, JAC.Basics.EmGauge, JAC.PhotoIonization.Line, JAC.PhotoIonization.Settings}","page":"Functions","title":"JAC.PhotoIonization.computeStatisticalTensorUnpolarized","text":"PhotoIonization.computeStatisticalTensorUnpolarized(k::Int64, q::Int64, gauge::EmGauge, line::PhotoIonization.Line,                                                              settings::PhotoIonization.Settings)       ... to compute the statistical tensor of the photoion in its final level after the photoionization of initially unpolarized atoms          by plane-wave photons with given Stokes parameters (density matrix). A value::ComplexF64 is returned.\n\n\n\n\n\n","category":"method"},{"location":"functions.html#JAC.PhotoIonization.computeTimeDelays-Tuple{Vector{JAC.PhotoIonization.Channel}, Vector{JAC.PhotoIonization.Channel}, Float64, AngularJ64}","page":"Functions","title":"JAC.PhotoIonization.computeTimeDelays","text":"PhotoIonization.computeTimeDelays(channels::Array{PhotoIonization.Channel,1}, xchannels::Array{PhotoIonization.Channel,1},                                      deltaE::Float64, Jf::AngularJ64)       ... to compute the – coherent and incoherent – time delay from the channels as calculated for two neighboured photon          energies (deltaE = xE - E). Two tuple of two time delays (coherentDelay::EmProperty, incoherentDelay::EmProperty)         is returned.\n\n\n\n\n\n","category":"method"},{"location":"functions.html#JAC.PhotoIonization.determineChannels-Tuple{Level, Level, JAC.PhotoIonization.Settings}","page":"Functions","title":"JAC.PhotoIonization.determineChannels","text":"PhotoIonization.determineChannels(finalLevel::Level, initialLevel::Level, settings::PhotoIonization.Settings)       ... to determine a list of photoionization Channel for a transitions from the initial to final level and by taking into account          the particular settings of for this computation; an Array{PhotoIonization.Channel,1} is returned.\n\n\n\n\n\n","category":"method"},{"location":"functions.html#JAC.PhotoIonization.determineLines-Tuple{Multiplet, Multiplet, JAC.PhotoIonization.Settings}","page":"Functions","title":"JAC.PhotoIonization.determineLines","text":"PhotoIonization.determineLines(finalMultiplet::Multiplet, initialMultiplet::Multiplet, settings::PhotoIonization.Settings)       ... to determine a list of PhotoIonization.Line's for transitions between levels from the initial- and final-state multiplets,          and  by taking into account the particular selections and settings for this computation; an Array{PhotoIonization.Line,1}          is returned. Apart from the level specification, all physical properties are set to zero during the initialization process.\n\n\n\n\n\n","category":"method"},{"location":"functions.html#JAC.PhotoIonization.displayLineData-Tuple{IO, Vector{JAC.PhotoIonization.Line}}","page":"Functions","title":"JAC.PhotoIonization.displayLineData","text":"PhotoIonization.displayLineData(stream::IO, lines::Array{PhotoIonization.Line,1})       ... to display the calculated data, ordered by the initial levels and the photon energies involved.         Neat tables of all initial levels and photon energies as well as all associated cross sections are printed         but nothing is returned otherwise.\n\n\n\n\n\n","category":"method"},{"location":"functions.html#JAC.PhotoIonization.displayLines-Tuple{IO, Vector{JAC.PhotoIonization.Line}}","page":"Functions","title":"JAC.PhotoIonization.displayLines","text":"PhotoIonization.displayLines(stream::IO, lines::Array{PhotoIonization.Line,1})       ... to display a list of lines and channels that have been selected due to the prior settings. A neat table of all selected          transitions and energies is printed but nothing is returned otherwise.\n\n\n\n\n\n","category":"method"},{"location":"functions.html#JAC.PhotoIonization.displayPhases-Tuple{Vector{JAC.PhotoIonization.Line}}","page":"Functions","title":"JAC.PhotoIonization.displayPhases","text":"PhotoIonization.displayPhases(lines::Array{PhotoIonization.Line,1})       ... to display a list of lines, channels and phases of the continuum wave that have been selected due to the prior settings.         A neat table of all selected transitions and energies is printed but nothing is returned otherwise.\n\n\n\n\n\n","category":"method"},{"location":"functions.html#JAC.PhotoIonization.displayResults-Tuple{IO, Vector{JAC.PhotoIonization.Line}, JAC.PhotoIonization.Settings}","page":"Functions","title":"JAC.PhotoIonization.displayResults","text":"PhotoIonization.displayResults(stream::IO, lines::Array{PhotoIonization.Line,1}, settings::PhotoIonization.Settings)       ... to list all results, energies, cross sections, etc. of the selected lines. A neat table is printed but nothing          is returned otherwise.\n\n\n\n\n\n","category":"method"},{"location":"functions.html#JAC.PhotoIonization.extractCrossSection-Tuple{Vector{JAC.PhotoIonization.Line}, Float64, Any}","page":"Functions","title":"JAC.PhotoIonization.extractCrossSection","text":"PhotoIonization.extractCrossSection(lines::Array{PhotoIonization.Line,1}, omega::Float64, initialLevel)       ... to extract from lines the total PI cross section that refer to the given omega and initial level;         a cross section cs::EmProperty is returned.\n\n\n\n\n\n","category":"method"},{"location":"functions.html#JAC.PhotoIonization.extractCrossSection-Tuple{Vector{JAC.PhotoIonization.Line}, Float64, Shell, Any}","page":"Functions","title":"JAC.PhotoIonization.extractCrossSection","text":"PhotoIonization.extractCrossSection(lines::Array{PhotoIonization.Line,1}, omega::Float64, shell::Shell, initialLevel)       ... to extract from lines the total PI cross section that refer to the given omega and initial level and to          to the ionization of an electron from shell; a cross section cs::EmProperty is returned.\n\n\n\n\n\n","category":"method"},{"location":"functions.html#JAC.PhotoIonization.extractLines-Tuple{Vector{JAC.PhotoIonization.Line}, Float64}","page":"Functions","title":"JAC.PhotoIonization.extractLines","text":"PhotoIonization.extractLines(lines::Array{PhotoIonization.Line,1}, omega::Float64)       ... to extract from lines all those that refer to the given omega;         a reduced list rLines::Array{PhotoIonization.Line,1} is returned.\n\n\n\n\n\n","category":"method"},{"location":"functions.html#JAC.PhotoIonization.extractPhotonEnergies-Tuple{Vector{JAC.PhotoIonization.Line}}","page":"Functions","title":"JAC.PhotoIonization.extractPhotonEnergies","text":"PhotoIonization.extractPhotonEnergies(lines::Array{PhotoIonization.Line,1})       ... to extract all photon energies for which photoionization data and cross sections are provided by lines;         an list of energies::Array{Float64,1} is returned.\n\n\n\n\n\n","category":"method"},{"location":"functions.html#JAC.PhotoIonization.getLineKappas-Tuple{JAC.PhotoIonization.Line}","page":"Functions","title":"JAC.PhotoIonization.getLineKappas","text":"PhotoIonization.getLineKappas(line::PhotoIonization.Line)       ... returns a list of kappa-values (partial waves) which contribute to the given line, to which one or several channels are          assigned. An kappaList::Array{Int64,1} is returned.\n\n\n\n\n\n","category":"method"},{"location":"functions.html#JAC.PhotoIonization.interpolateCrossSection-Tuple{Vector{JAC.PhotoIonization.Line}, Float64, Any}","page":"Functions","title":"JAC.PhotoIonization.interpolateCrossSection","text":"PhotoIonization.interpolateCrossSection(lines::Array{PhotoIonization.Line,1}, omega::Float64, initialLevel)       ... to interpolate (or extrapolate) from lines the total PI cross section for any given omega and          initial level. The procedure applies a linear interpolation/extrapolation by just using the          cross sections from the two nearest (given) omega points; a cross section cs::EmProperty is returned.\n\n\n\n\n\n","category":"method"},{"location":"license.html#jac-license","page":"License","title":"LICENSE","text":"","category":"section"},{"location":"license.html#The-JAC.jl-package-is-licensed-under-the-MIT-\"Expat\"-License:","page":"License","title":"The JAC.jl package is licensed under the MIT \"Expat\" License:","text":"","category":"section"},{"location":"license.html","page":"License","title":"License","text":"Copyright (c) 2017-2025: Stephan Fritzsche.Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","category":"page"},{"location":"examples.html#Atomic-structure-calculation","page":"Examples","title":"Atomic structure calculation","text":"","category":"section"},{"location":"examples.html","page":"Examples","title":"Examples","text":" a = 1","category":"page"},{"location":"examples.html","page":"Examples","title":"Examples","text":"One can access the doc strings as","category":"page"},{"location":"examples.html","page":"Examples","title":"Examples","text":"using JAC   # hide\nJAC.Level()","category":"page"},{"location":"reference.html","page":"Reference","title":"Reference","text":"For reference to (using) this code, please, use the Computer Physics Communications publication on JAC:","category":"page"},{"location":"reference.html","page":"Reference","title":"Reference","text":"S. Fritzsche: A fresh computational approach to atomic structures, processes and cascades     Computer Physics Communications 240, 1 (2019)\nG. Gaigalas & S. Fritzsche: Angular coefficients for symmetry-adapted configuration states in jj-coupling.    Comp. Phys. Commun. 267, 108086 (2021)\nS. Fritzsche, P. Palmeri & S. Schippers: Atomic cascade computations. Symmetry 13, 520 (2021)\nS. Fritzsche: Symbolic evaluation of expressions from Racah’s algebra. Symmetry 13, 1558 (2021)\nS. Fritzsche & A. Surzhykov: Approximate atomic Green functions. Molecules 26, 2660 (2021)\nS. Fritzsche: Dielectronic recombination strengths and plasma rate coefficients of multiply-charged ions.    A&A 656, A163 (2021)\nS. Fritzsche: Level structure and properties of open f-shell elements. Atoms 10, 7 (2022)\nS. Fritzsche: Photon emission from hollow ions near surfaces. Atoms 10, 37 (2022)\nS. Fritzsche, B. Böning: Strong-field ionization amplitudes for atomic many-electron targets. Atoms 10, 70 (2022)\nS. Fritzsche: Application of symmetry-adapted atomic amplitudes. Atoms 10, 127 (2022)\nS. Fritzsche, A.V. Maiorova & Z.W. Wu: Radiative recombination plasma rate coefficients of multiply-charged ions.    Atoms 11, 50 (2023)\nS. Fritzsche, L.G. Jiao, Y.C. Wang & J.E. Sienkiewicz; Collision strengths of astrophysical interest for multiply charged ions.    Atoms 11, 80 (2023)\nS. Fritzsche, A.K. Sahoo, L.Sharma, Z.W. Wu & S. Schippers; Merits of atomic cascade computations.    European Physical Journal D 78, 75 (2024)\nA.K. Sahoo, S. Fritzsche & L.Sharma; Computation of effective collision strengths for plasma applications using JAC.    European Physical Journal Plus 139, 986 (2024)\nS. Fritzsche, H.K. Huang, Z.K. Huang, S. Schippers, W.Q. Wen and Z.W. Wu; Dielectronic recombination into high-n Rydberg shells.    European Physical Journal D 79, 22 (2025)\nS. Fritzsche; Atomic input for modeling ionic mixtures in astrophysical plasma.    European Physical Journal A 61, 63 (2025)","category":"page"},{"location":"index.html#Jena-Atomic-Calculator-(JAC)-for-the-computation-of-atomic-representations,-processes-and-cascades","page":"Home","title":"Jena Atomic Calculator (JAC) for the computation of atomic representations, processes and cascades","text":"","category":"section"},{"location":"index.html","page":"Home","title":"Home","text":"Last update: April, 15th, 2025","category":"page"},{"location":"index.html#What-is-JAC?","page":"Home","title":"What is JAC?","text":"","category":"section"},{"location":"index.html","page":"Home","title":"Home","text":"JAC, the Jena Atomic Calculator, provides an open-source Julia package for doing atomic computations of various kind and complexity. In particular, JAC is a (relativistic) electronic structure code for the computation of (atomic many-electron)  interaction amplitudes, properties as well as a good number of excitation and decay processes for open-shell atoms and ions  across the whole periodic table. In recent years, moreover, emphasis has been placed support atomic cascade computations in different physical contexts as well as symbolic analysis (simplifications) of expressions from Racah's algebra. Some further work is done (or planned) to incorporate central features for studying atomic – strong-field – responses to external fields and particles, or the time-evolution of atoms and ions in the framework of (time-dependent) density matrix and Liouville equations.","category":"page"},{"location":"index.html","page":"Home","title":"Home","text":"A primary guiding philosophy of JAC was to develop a general and easy-to-use toolbox for the atomic physics community,  including an interface that is equally accessible for scientists working in astro and plasma physics, atomic spectroscopy, theoretical physics as well as for code developers. Beside of its simple use, however, we wish to provide and support a modern code design, a reasonable detailed documentation of the code and features for integrated testing. Indeed, the JAC toolbox  facilitates many typical computations and the handling of atomic data by providing input interfaces similar to what one  uses in a in spoken or written language. Shortly speaking, JAC aims to provide a powerful platform for daily use and  to extent atomic theory towards new applications or, eventually, a community platform for Just Atomic Computations.","category":"page"},{"location":"index.html#Installation","page":"Home","title":"Installation","text":"","category":"section"},{"location":"index.html","page":"Home","title":"Home","text":"The development version of JAC can installed installed directly in the interactive Julia REPL (Read-Eval-Print-Loop) Press ] to enter the Julia package mode and type add https://github.com/OpenJAC/JAC.jl to install JAC.","category":"page"},{"location":"index.html","page":"Home","title":"Home","text":"julia> ]\n(@v1.10) pkg> add https://github.com/OpenJAC/JAC.jl","category":"page"},{"location":"index.html#Development","page":"Home","title":"Development","text":"","category":"section"},{"location":"index.html","page":"Home","title":"Home","text":"As a Scientific package users are encouraged to explore the capabilities of JAC, and modify the package as per their requirement. JAC comes with an MIT 'Expat' License.","category":"page"},{"location":"index.html","page":"Home","title":"Home","text":"For development purpose, user can install JAC from GitHub to their desired direcory using git clone in the terminal. This will download a copy of JAC from the development branch of GitHub repository.","category":"page"},{"location":"index.html","page":"Home","title":"Home","text":"git clone https://github.com/OpenJAC/JAC.jl.git","category":"page"},{"location":"index.html","page":"Home","title":"Home","text":"Next cd to the JAC.jl directory and start a new Julia session","category":"page"},{"location":"index.html","page":"Home","title":"Home","text":"shell> cd JAC.jl\nshell> julia","category":"page"},{"location":"index.html","page":"Home","title":"Home","text":"Then activate the JAC.jl environment and install the dependancy packages of JAC.jl","category":"page"},{"location":"index.html","page":"Home","title":"Home","text":"julia> ]                   # Change to the Julia package mode\n(@v1.10) pkg> activate .\n(JAC) pkg> instantiate     # Installs the dependancy packages of JAC\n(JAC) pkg> resolve         # Required **Only if** there is a cinflict in the dependancies\n(JAC) pkg> develop .       # Adds the current directory path to Julia local Registry","category":"page"},{"location":"contributors.html#Developers:","page":"Contributers","title":"Developers:","text":"","category":"section"},{"location":"contributors.html","page":"Contributers","title":"Contributers","text":"Fritzsche, Stephan, s.fritzsche@gsi.de (U Jena, Germany)\nSahoo, Aloka Kumar, aloka_s@ph.iitr.ac.in (HI Jena, Germany)\nHuang, Houke (Institute of Modern Physics, Lanzhou, China)\nWang, Wu (HI Jena, Germany & U Haikou, China)\nLi, Bowen (U Lanzhou, China)","category":"page"},{"location":"contributors.html#(Former)-Supporters:","page":"Contributers","title":"(Former) Supporters:","text":"","category":"section"},{"location":"contributors.html","page":"Contributers","title":"Contributers","text":"Böning, Birger (HI Jena, Germany)\nDar, Danish F. (U Jena, Germany)\nGaigalas, Gediminas (U Vilnius, Lithuania)\nGilles, Jan (PTB Braunschweig, Germany)\nHofbrucker, Jiri (U Jena, Germany)\nJiao, Li-Guang (HI Jena, Germany & Jilin U Changchun, China)\nSchippers, Stefan (U Giessen, Germany)\nSienkiwicz, Joseph (TU Gdansk, Poland)\nSurzhykov, Andrey (U Braunschweig, Germany)\nVolotka, Andrey (HI Jena, Germany & St. Petersburg, Russia)\nWang, Yuan-Cheng (HI Jena, Germany & U Shenyang, China)\nWu, Zhongwen (HI Jena, Germany & U Lanzhou, China)","category":"page"},{"location":"types.html#Auto-Ionization","page":"Types","title":"Auto Ionization","text":"","category":"section"},{"location":"types.html","page":"Types","title":"Types","text":"Modules = [AutoIonization]\nOrder   = [:type]","category":"page"},{"location":"types.html#JAC.AutoIonization.Channel","page":"Types","title":"JAC.AutoIonization.Channel","text":"struct  Channel        ... defines a type for a AutoIonization channel to help characterize a scattering (continuum) state of many          electron-states with a single free electron.\n\n+ kappa          ::Int64                ... partial-wave of the free electron\n+ symmetry       ::LevelSymmetry        ... total angular momentum and parity of the scattering state\n+ phase          ::Float64              ... phase of the partial wave\n+ amplitude      ::Complex{Float64}     ... Auger amplitude associated with the given channel.\n\n\n\n\n\n","category":"type"},{"location":"types.html#JAC.AutoIonization.Line","page":"Types","title":"JAC.AutoIonization.Line","text":"struct  Line       ... defines a type for a AutoIonization line that may include the definition of sublines and their          corresponding amplitudes.\n\n+ initialLevel   ::Level           ... initial-(state) level\n+ finalLevel     ::Level           ... final-(state) level\n+ electronEnergy ::Float64         ... Energy of the (incoming free) electron.\n+ totalRate      ::Float64         ... Total rate of this line.\n+ angularAlpha   ::Float64         ... Angular alpha_2 coefficient.\n+ channels       ::Array{AutoIonization.Channel,1}  ... List of AutoIonization channels of this line.\n\n\n\n\n\n","category":"type"},{"location":"types.html#JAC.AutoIonization.Line-Tuple{Level, Level, Float64}","page":"Types","title":"JAC.AutoIonization.Line","text":"AutoIonization.Line(initialLevel::Level, finalLevel::Level, totalRate::Float64)       ... constructor for an AutoIonization line between a specified initial and final level.\n\n\n\n\n\n","category":"method"},{"location":"types.html#JAC.AutoIonization.PlasmaSettings","page":"Types","title":"JAC.AutoIonization.PlasmaSettings","text":"struct  AutoIonization.PlasmaSettings  <:  Basics.AbstractLineShiftSettings       ... defines a type for the details and parameters of computing Auger rates with plasma interactions.\n\n+ printBefore         ::Bool             ... True, if all energies and lines are printed before their evaluation.\n+ lineSelection       ::LineSelection    ... Specifies the selected levels, if any.\n\n\n\n\n\n","category":"type"},{"location":"types.html#JAC.AutoIonization.PlasmaSettings-Tuple{}","page":"Types","title":"JAC.AutoIonization.PlasmaSettings","text":"AutoIonization.PlasmaSettings()  ... constructor for a standard instance of AutoIonization.PlasmaSettings.\n\n\n\n\n\n","category":"method"},{"location":"types.html#JAC.AutoIonization.Settings","page":"Types","title":"JAC.AutoIonization.Settings","text":"struct  Settings  <:  AbstractProcessSettings  ... defines a type for the details and parameters of computing Auger lines.\n\n+ calcAnisotropy      ::Bool               ... True, if the intrinsic alpha_2,4 angular parameters are to be \n                                                calculated, and false otherwise.\n+ calcTeAuger         ::Bool               \n    ... True, if contributions of the two-electron Auger transitions are to be calculated, and false otherwise;\n        this flag requires a proper (resonant) Green function that supports the TEA transitions.\n+ printBefore         ::Bool               ... True, if all energies and lines are printed before their evaluation.\n+ lineSelection       ::LineSelection      ... Specifies the selected levels, if any.\n+ augerEnergyShift    ::Float64            ... An overall energy shift for all Auger (free-electron) energies.\n+ minAugerEnergy      ::Float64            ... Minimum energy of free (Auger) electrons to be included.\n+ maxAugerEnergy      ::Float64            ... Maximum energy of free (Auger) electrons to be included.\n+ maxKappa            ::Int64              ... Maximum kappa value of partial waves to be included.\n+ operator            ::AbstractEeInteraction   \n    ... Auger operator that is to be used for evaluating the Auger amplitudes; allowed values are: \n        CoulombInteraction(), BreitInteraction(), ...\n+ gMultiplet          ::Multiplet      \n    ... Mean-field multiplet of intermediate levels in the computations, sometimes referred to as\n        (resonant) Green function.\n\n\n\n\n\n","category":"type"},{"location":"types.html#JAC.AutoIonization.Settings-Tuple{JAC.AutoIonization.Settings}","page":"Types","title":"JAC.AutoIonization.Settings","text":"AutoIonization.Settings(set::AutoIonization.Settings;\n\n    calcAnisotropy=..,      calcTeAuger..,              printBefore=..,         augerEnergyShift=.., \n    minAugerEnergy=..,      maxAugerEnergy=..,          maxKappa=..,            operator=..,\n    gMultiplet=.. )\n                \n... constructor for modifying the given AutoIonization.Settings by 'overwriting' the previously selected parameters.\n\n\n\n\n\n","category":"method"},{"location":"types.html#JAC.AutoIonization.Settings-Tuple{}","page":"Types","title":"JAC.AutoIonization.Settings","text":"AutoIonization.Settings()  ... constructor for the default values of AutoIonization line computations.\n\n\n\n\n\n","category":"method"},{"location":"types.html#Dielectronic-Recombination","page":"Types","title":"Dielectronic Recombination","text":"","category":"section"},{"location":"types.html","page":"Types","title":"Types","text":"Modules = [DielectronicRecombination]\nOrder   = [:type]","category":"page"},{"location":"types.html#JAC.DielectronicRecombination.AbstractCorrections","page":"Types","title":"JAC.DielectronicRecombination.AbstractCorrections","text":"abstract type DielectronicRecombination.AbstractCorrections      ... defines an abstract type to distinguish different types of corrections to the decay rates and strength.         These corrections are based on the classification of shell:\n\n    n^(core)  <   n^(final)  <  n^(hydrogenic)  <  n^(lowest-captured)  <  n^(lower-empirical)    \n              <=  n^(upper-empirical)              ... where\n              \n    n^(core)            ... refers to the (maximum) principal quantum number to which initial core electrons are excited;\n    n^(final)           ... the maximum number for which shells are treated explicitly in the representation of the final levels f;\n    n^(hydrogenic)      ... to the maximum n-shell, to which the radiative decay is modeled by scaled-hydrogenic rates, \n                        ... and which can be omitted also from the list. \n    n^(lowest-captured) ... is the lowest, high-n shell, into which the additional electron is captured and which must\n                            (of course) occur explicitly in the basis of the intermediate and final levels. \n    [n^(lower-empirical)  <=  n^(upper-empirical)]  \n                        ... designates additional (empirical) high-n shells for which the contributions to the DR resonances \n                            are still estimated empirically by using arguments from quantum-defect theory. All shells with \n                            n > n^(upper-empirical) are neglected completely for their contributions to the DR spectra; see also:\n\n+ struct DielectronicRecombination.EmpiricalCorrections  \n    ... to estimate empirically the contributions of additional resonances for the capture of an electron into\n        shells with [n^(lower-empirical)  <=  n^(upper-empirical)]. A simple scaling of the rates, calculated initially\n        for n^(lowest-captured), ... only, is utilized for estimating the associated strength for these additional\n        resonances.\n+ struct DielectronicRecombination.HydrogenicCorrections  \n    ... to add for missing final decay levels to the (total) photon decay rates by scaling the corresponding rates\n        of non-relativistic hydrogenic ions with a suitable effective charge (Zeff); these hydrogenic corrections improve\n        goth, the total photon rate as well as the resonance strength.\n+ struct DielectronicRecombination.MaximumlCorrection  \n    ... to exclude all subshells with l > l_max in the hydrogenic corrections; this restriction does not apply to the \n        given resonance levels, which can be controlled (and are specified) by the list of intermediate configurations.\n\n\n\n\n\n","category":"type"},{"location":"types.html#JAC.DielectronicRecombination.EmpiricalCorrections","page":"Types","title":"JAC.DielectronicRecombination.EmpiricalCorrections","text":"struct  DielectronicRecombination.EmpiricalCorrections  <:  DielectronicRecombination.AbstractCorrections       ... to include empirical corrections for the shells with [n^(lower-empirical)  <=  n^(upper-empirical)].         A rather rude model is used so far.\n\n+ nUpperEmpirical ::Union{Int64,Missing}   \n    ... The upper-empirical shell for which rate contributions are estimated; the lower-empirical shell = n^(captured-max + 1) \n        is derived from the given configuration lists. No corrections are made for nUpperEmpirical <= n^(captured-max + 1).\n+ effectiveZ      ::Union{Float64,Missing}  ... effective charge Z_eff for the hydrogenic correction (inactive).\n+ rateScaling     ::Union{Float64,Missing}  ... scaling factor to modify the estimated rates.\n\n\n\n\n\n","category":"type"},{"location":"types.html#JAC.DielectronicRecombination.EmpiricalTreatment","page":"Types","title":"JAC.DielectronicRecombination.EmpiricalTreatment","text":"struct  DielectronicRecombination.EmpiricalTreatment       ... defines an (internal) type to communicate and distribute the physical (and technical) parameters         that are utilized to make the requested empirical corrections or just nothing. This data type should         not be applied by the user but is initialized by the given (set of) corrections.         Otherwise, it is treated like any other type in JAC. All parameters are made physically \"explicit\",         even if they were \"missing\" originally, and can be directly applied in the empirical treatment of         the DR process. The following hierarchy of shells is used:\n\n    n^(core)  <   n^(final)  <  n^(hydrogenic)  <  n^(lowest-captured)  <  n^(lower-empirical)    \n              <=  n^(upper-empirical) \n    \n+ doEmpiricalCorrections      ::Bool    ... True, if empirical corrections are needed, false o/w.\n+ doHydrogenicCorrections     ::Bool    ... True, if hydrogenic corrections are needed, false o/w.\n+ doMaximumlCorrection        ::Bool    ... True, if a maximum l values is used, false o/w.\n+ doResonanceWindowCorrection ::Bool    ... True, if a window of resonances is specified, false o/w.\n+ nCore                       ::Int64   \n    ... (maximum) principal quantum number to which initial core electrons are excited;\n+ nFinal                      ::Int64   \n    ... the maximum number for which shells are treated explicitly in the representation of the final levels f;\n+ nHydrogenic                 ::Int64   \n    ... maximum n-shell, to which the radiative decay is modeled by scaled-hydrogenic rates. \n+ nLowestCaptured             ::Int64   \n    ... lowest, high-n shell, into which the additional electron is captured and which must (of course) occur \n        explicitly in the basis of the intermediate and final levels.\n+ nLowerEmpirical             ::Int64   \n    ... maximum n-shell, to which the radiative decay is modeled by scaled-hydrogenic rates. \n+ nUpperEmpirical             ::Int64   \n    ... additional (empirical) high-n shells for which the contributions to the DR resonances are still \n        estimated empirically by using arguments from quantum-defect theory.\n+ maximum_l                   ::Int64    ... maximum l value; is set to a large value if not specified by the user.\n+ hydrogenicEffectiveZ        ::Float64  ... effective charge Z_eff for the hydrogenic correction (inactive).\n+ hydrogenicRateScaling       ::Float64  ... scaling factor to modify the estimated hydrogenic rates.\n+ empiricalEffectiveZ         ::Float64  ... effective Z for empirical estimates\n+ empiricalRateScaling        ::Float64  ... scaling factor to modify the empirical rates.\n+ resonanceEnergyMin:         ::Float64  ... minimum energy [Hartree] of the resonances to be considered.\n+ resonanceEnergyMax:         ::Float64  ... maximum energy [Hartree] of the resonances to be considered.\n\n\n\n\n\n","category":"type"},{"location":"types.html#JAC.DielectronicRecombination.HydrogenicCorrections","page":"Types","title":"JAC.DielectronicRecombination.HydrogenicCorrections","text":"struct  DielectronicRecombination.HydrogenicCorrections  <:  DielectronicRecombination.AbstractCorrections       ... to add for missing final decay levels the photon decay rates for non-relativistic hydrogenic ions;         this improves the total photon rate as well as the resonance strength. These corrections are taken into         account for all shells with n^{final}+1 <= n <= nHydrogenic\n\n+ nHydrogenic       ::Union{Int64,Missing}   \n    ... upper principal quantum number nHydrogenic for which hydrogenic correctios to the radiative photon rates are \n        calculated explicitly; the photon rates are further scaled if some proper effectiveZ and/or rateScaling\n        is provided.\n+ effectiveZ      ::Union{Float64,Missing}   ... effective charge Z_eff for the hydrogenic correction.\n+ rateScaling     ::Union{Float64,Missing}   ... scaling factor to scale the photon rates\n\n\n\n\n\n","category":"type"},{"location":"types.html#JAC.DielectronicRecombination.MaximumlCorrection","page":"Types","title":"JAC.DielectronicRecombination.MaximumlCorrection","text":"struct  DielectronicRecombination.MaximumlCorrection  <:  DielectronicRecombination.AbstractCorrections       ... to exclude all subshells with l > l_max, both in the treatment of the corrections shells.\n\n+ maximum_l    ::Union{Int64,Missing}   \n    ... maximum orbital angular momentum quantum number for which contributions to the DR strengths are \n        taken into account. This number applies for all subshells for which other corrections are \n        requested, whereas the \"physical subshells\" are defined by the configuration lists.\n\n\n\n\n\n","category":"type"},{"location":"types.html#JAC.DielectronicRecombination.Passage","page":"Types","title":"JAC.DielectronicRecombination.Passage","text":"struct  DielectronicRecombination.Passage       ... defines a type for a dielectronic recombination passage, i.e. a (reduced) pathways, that include the          definition of channels and their corresponding amplitudes for the individual i –> m resonances, whereas         the subsequent radiative stabilization is considered only later.\n\n+ initialLevel      ::Level                   ... initial-(state) level\n+ intermediateLevel ::Level                   ... intermediate-(state) level\n+ electronEnergy    ::Float64                 ... energy of the (incoming, captured) electron\n+ captureRate       ::Float64                 ... rate for the electron capture (Auger rate)\n+ photonRate        ::EmProperty              ... rate for the photon emission\n+ reducedStrength   ::EmProperty              \n    ... reduced resonance strength Sum_f S(i -> d -> f) * Gamma_d of this passage; this reduced strength does \n        not require the knowledge of Gamma_d for the individual passage.\n+ captureChannels   ::Array{AutoIonization.Channel,1}   ... List of |i> -->  |n>   dielectronic (Auger) capture channels.\n\n\n\n\n\n","category":"type"},{"location":"types.html#JAC.DielectronicRecombination.Passage-Tuple{}","page":"Types","title":"JAC.DielectronicRecombination.Passage","text":"DielectronicRecombination.Passage()       ... constructor for an 'empty' instance of a dielectronic recombination passage between a specified          initial and intermediate level.\n\n\n\n\n\n","category":"method"},{"location":"types.html#JAC.DielectronicRecombination.Pathway","page":"Types","title":"JAC.DielectronicRecombination.Pathway","text":"struct  DielectronicRecombination.Pathway       ... defines a type for a dielectronic recombination pathways that may include the definition of channels and          their corresponding amplitudes.\n\n+ initialLevel      ::Level                   ... initial-(state) level\n+ intermediateLevel ::Level                   ... intermediate-(state) level\n+ finalLevel        ::Level                   ... final-(state) level\n+ electronEnergy    ::Float64                 ... energy of the (incoming, captured) electron\n+ photonEnergy      ::Float64                 ... energy of the (emitted) photon\n+ captureRate       ::Float64                 ... rate for the electron capture (Auger rate)\n+ photonRate        ::EmProperty              ... rate for the photon emission\n+ angularBeta       ::EmProperty              ... beta parameter of the photon emission\n+ reducedStrength   ::EmProperty              ... reduced resonance strength S(i -> d -> f) * Gamma_d of this pathway;\n                                                    this reduced strength does not require the knowledge of Gamma_d for each pathway.\n+ captureChannels   ::Array{AutoIonization.Channel,1}   ... List of |i> -->  |n>   dielectronic (Auger) capture channels.\n+ photonChannels    ::Array{PhotoEmission.Channel,1}    ... List of |n> -->  |f>   radiative stabilization channels.\n\n\n\n\n\n","category":"type"},{"location":"types.html#JAC.DielectronicRecombination.Pathway-Tuple{}","page":"Types","title":"JAC.DielectronicRecombination.Pathway","text":"DielectronicRecombination.Pathway()       ... constructor for an 'empty' instance of a dielectronic recombination pathway between a specified          initial, intermediate and final level.\n\n\n\n\n\n","category":"method"},{"location":"types.html#JAC.DielectronicRecombination.Resonance","page":"Types","title":"JAC.DielectronicRecombination.Resonance","text":"struct  DielectronicRecombination.Resonance       ... defines a type for a dielectronic resonance as defined by a given initial and resonance level but by summing over all final levels\n\n+ initialLevel      ::Level             ... initial-(state) level\n+ intermediateLevel ::Level             ... intermediate-(state) level\n+ resonanceEnergy   ::Float64           ... energy of the resonance w.r.t. the inital-state\n+ resonanceStrength ::EmProperty        ... strength of this resonance due to the stabilization into any of the allowed final levels.\n+ captureRate       ::Float64           ... capture (Auger) rate to form the intermediate resonance, starting from the initial level.\n+ augerRate         ::Float64           ... total (Auger) rate for an electron emission of the intermediate resonance\n+ photonRate        ::EmProperty        ... total photon rate for a photon emission, i.e. for stabilization.\n\n\n\n\n\n","category":"type"},{"location":"types.html#JAC.DielectronicRecombination.Resonance-Tuple{}","page":"Types","title":"JAC.DielectronicRecombination.Resonance","text":"DielectronicRecombination.Resonance()       ... constructor for an 'empty' instance of a dielectronic resonance as defined by a given initial and resonance          level but by summing over all final levels.\n\n\n\n\n\n","category":"method"},{"location":"types.html#JAC.DielectronicRecombination.ResonanceSelection","page":"Types","title":"JAC.DielectronicRecombination.ResonanceSelection","text":"struct  DielectronicRecombination.ResonanceSelection       ... defines a type for selecting classes of resonances in terms of leading configurations.\n\n+ active          ::Bool              ... initial-(state) level\n+ fromShells      ::Array{Shell,1}    ... List of shells from which excitations are to be considered.\n+ toShells        ::Array{Shell,1}    ... List of shells to which (core-shell) excitations are to be considered.\n+ intoShells      ::Array{Shell,1}    ... List of shells into which electrons are initially placed (captured).\n\n\n\n\n\n","category":"type"},{"location":"types.html#JAC.DielectronicRecombination.ResonanceSelection-Tuple{}","page":"Types","title":"JAC.DielectronicRecombination.ResonanceSelection","text":"DielectronicRecombination.ResonanceSelection()       ... constructor for an 'empty' instance of a ResonanceSelection()\n\n\n\n\n\n","category":"method"},{"location":"types.html#JAC.DielectronicRecombination.ResonanceWindowCorrection","page":"Types","title":"JAC.DielectronicRecombination.ResonanceWindowCorrection","text":"struct  DielectronicRecombination.ResonanceWindowCorrection  <:  DielectronicRecombination.AbstractCorrections       ... to exclude all DR resonances outside of a given \"window [Emin, Emax]\" of resonance energies with         regard to the initial level.\n\n+ energyMin  ::Float64   ... minimum energy [Hartree] of the resonances to be considered.  \n+ energyMax  ::Float64   ... maximum energy [Hartree] of the resonances to be considered.\n\n\n\n\n\n","category":"type"},{"location":"types.html#JAC.DielectronicRecombination.Settings","page":"Types","title":"JAC.DielectronicRecombination.Settings","text":"struct  DielectronicRecombination.Settings  <:  AbstractProcessSettings       ... defines a type for the details and parameters of computing dielectronic recombination pathways.\n\n+ multipoles            ::Array{EmMultipoles}  ... Multipoles of the radiation field that are to be included.\n+ gauges                ::Array{UseGauge}      ... Specifies the gauges to be included into the computations.\n+ calcOnlyPassages      ::Bool                 \n    ... Only compute resonance strength but without making all the pathways explicit. This option is useful\n        for the capture into high-n shells or if the photons are not considered explicit. It also treats the \n        shells differently due to the given core shells < final-state shells < hydrogenically-scaled shells <\n        capture-shells < asymptotic-shells. Various correction and multi-threading techiques can be applied\n        to deal with or omit different classes of these shells.\n+ calcRateAlpha         ::Bool                 \n    ... True, if the DR rate coefficients are to be calculated, and false o/w.\n+ printBefore           ::Bool                 \n    ... True, if all energies and pathways are printed before their evaluation.\n+ pathwaySelection      ::PathwaySelection     ... Specifies the selected levels/pathways, if any.\n+ electronEnergyShift   ::Float64              \n    ... An overall energy shift for all electron energies (i.e. from the initial to the resonance levels [Hartree].\n+ photonEnergyShift     ::Float64              \n    ... An overall energy shift for all photon energies (i.e. from the resonance to the final levels.\n+ mimimumPhotonEnergy   ::Float64              \n    ... minimum transition energy for which photon transitions are  included into the evaluation.\n+ temperatures          ::Array{Float64,1}     \n    ... list of temperatures for which plasma rate coefficients are displayed; however, these rate coefficients\n        only include the contributions from those pathsways that are calculated here explicitly.\n+ corrections           ::Array{DielectronicRecombination.AbstractCorrections,1}\n    ... Specify, if appropriate, the inclusion of additional corrections to the rates and DR strengths.\n+ augerOperator         ::AbstractEeInteraction \n    ... Auger operator that is to be used for evaluating the Auger amplitude's; the allowed values are: \n        CoulombInteraction(), BreitInteration(), CoulombBreit(), CoulombGaunt().\n\n\n\n\n\n","category":"type"},{"location":"types.html#JAC.DielectronicRecombination.Settings-Tuple{JAC.DielectronicRecombination.Settings}","page":"Types","title":"JAC.DielectronicRecombination.Settings","text":"(set::DielectronicRecombination.Settings;\n\n    multipoles=..,             gauges=..,                  \n    calcOnlyPassages=..,       calcRateAlpha=..,         printBefore=..,           pathwaySelection=..,     \n    electronEnergyShift=..,    photonEnergyShift=..,       \n    mimimumPhotonEnergy=..,    temperatures=..,          corrections=..,           augerOperator=..)\n                \n... constructor for modifying the given DielectronicRecombination.Settings by 'overwriting' the previously selected parameters.\n\n\n\n\n\n","category":"method"},{"location":"types.html#JAC.DielectronicRecombination.Settings-Tuple{}","page":"Types","title":"JAC.DielectronicRecombination.Settings","text":"DielectronicRecombination.Settings()       ... constructor for the default values of dielectronic recombination pathway computations.\n\n\n\n\n\n","category":"method"},{"location":"types.html#Electron-Impact-Excitation","page":"Types","title":"Electron Impact Excitation","text":"","category":"section"},{"location":"types.html","page":"Types","title":"Types","text":"Modules = [ImpactExcitation]\nOrder   = [:type]","category":"page"},{"location":"types.html#JAC.ImpactExcitation.Channel","page":"Types","title":"JAC.ImpactExcitation.Channel","text":"struct  ImpactExcitation.Channel       ... defines a type for a electron-impact excitaiton channel to help characterize the incoming and outgoing (continuum) states of          many electron-states with a single free electron\n\n+ initialKappa     ::Int64              ... partial-wave of the incoming free electron\n+ finalKappa       ::Int64              ... partial-wave of the outgoing free electron\n+ symmetry         ::LevelSymmetry      ... total angular momentum and parity of the scattering state\n+ initialPhase     ::Float64            ... phase of the incoming partial wave\n+ finalPhase       ::Float64            ... phase of the outgoing partial wave\n+ amplitude        ::Complex{Float64}   ... Collision amplitude associated with the given channel.\n\n\n\n\n\n","category":"type"},{"location":"types.html#JAC.ImpactExcitation.Line","page":"Types","title":"JAC.ImpactExcitation.Line","text":"struct  ImpactExcitation.Line       ... defines a type for a electron-impact excitation line that may include the definition of channels and their corresponding                                                                                                                         amplitudes.\n\n+ initialLevel           ::Level         ... initial- (bound-state) level\n+ finalLevel             ::Level         ... final- (bound-state) level\n+ initialElectronEnergy  ::Float64       ... energy of the incoming (initial-state) free-electron\n+ finalElectronEnergy    ::Float64       ... energy of the outgoing (final-state) free-electron\n+ crossSection           ::Float64       ... total cross section of this line\n+ collisionStrength      ::Float64       ... total collision strength of this line\n+ channels               ::Array{ImpactExcitation.Channel,1}  ... List of ImpactExcitation channels of this line.\n+ convergence            ::Float64       ... convergence of calculation\n\n\n\n\n\n","category":"type"},{"location":"types.html#JAC.ImpactExcitation.Line-Tuple{Level, Level, Float64}","page":"Types","title":"JAC.ImpactExcitation.Line","text":"ImpactExcitation.Line(initialLevel::Level, finalLevel::Level, crossSection::Float64)       ... constructor for an electron-impact excitation line between a specified initial and final level.\n\n\n\n\n\n","category":"method"},{"location":"types.html#JAC.ImpactExcitation.Line-Tuple{}","page":"Types","title":"JAC.ImpactExcitation.Line","text":"ImpactExcitation.Line()  ... 'empty' constructor for an electron-impact excitation line between a specified initial and final level.\n\n\n\n\n\n","category":"method"},{"location":"types.html#JAC.ImpactExcitation.RateCoefficients","page":"Types","title":"JAC.ImpactExcitation.RateCoefficients","text":"struct  ImpactExcitation.RateCoefficients     ... Defines a type for the output results from excitation rate or                                                     effective collision strengths calculations     + initialLevel        ::Level               ... initial- (bound-state) level     + finalLevel          ::Level               ... final- (bound-state) level     + temperatures        ::Array{Float64,1}    ... Temperatures in [K] to calculate excitation rates and effective collision strengths     + alphas              ::Array{Float64,1}    ... Excitation rate coefficients in [cm^3/s] for the input temperatures     + effOmegas           ::Array{Float64,1}    ... Effective collision strengths for the input temperatures\n\n\n\n\n\n","category":"type"},{"location":"types.html#JAC.ImpactExcitation.RateCoefficients-Tuple{}","page":"Types","title":"JAC.ImpactExcitation.RateCoefficients","text":"ImpactExcitation.RateCoefficients()  ... constructor for the default values of electron-impact excitation rate coefficient or                                             effective collision strength computations.\n\n\n\n\n\n","category":"method"},{"location":"types.html#JAC.ImpactExcitation.Settings","page":"Types","title":"JAC.ImpactExcitation.Settings","text":"struct  ImpactExcitation.Settings  <:  AbstractProcessSettings  ... defines a type for the details and parameters of computing                                                                                                  electron-impact excitation lines.     + lineSelection            ::LineSelection      ... Specifies the selected levels, if any.     + electronEnergies         ::Array{Float64,1}   ... List of impact-energies of the incoming elecgtrons (in user-defined units).     + energyShift              ::Float64            ... An overall energy shift for all transitions |i> –> |f>.     + maxKappa                 ::Int64              ... Maximum kappa value of partial waves to be included.     + calcRateCoefficient      ::Bool               ... True, if the plasma rate coefficients to be calculated, false otherwise.     + maxEnergyMultiplier      ::Float64            ... Maximum initial electron energy for eff. collision strength integration.                                      (maxEnergyMultiplier * Excitation threshold energy), after this assymptotic limit is applied.     + numElectronEnergies      ::Int64              ... No. of different electron energy points at which collision strengths to compute                                                         in electron energy range [0, (maxEnergyMultiplier * Excitation threshold energy)]     + temperatures             ::Array{Float64, 1}  ... Electron temperatures [K] for eff. collision strengths and rate coefficients.     + printBefore              ::Bool               ... True, if all energies and lines are printed before their evaluation.     + operator                 ::AbstractEeInteraction            ... Interaction operator that is to be used for evaluating the e-e interaction amplitudes; allowed values are:              CoulombInteraction(), BreitInteraction(), ...\n\n\n\n\n\n","category":"type"},{"location":"types.html#JAC.ImpactExcitation.Settings-Tuple{JAC.ImpactExcitation.Settings}","page":"Types","title":"JAC.ImpactExcitation.Settings","text":"ImpactExcitation.Settings(set::ImpactExcitation.Settings;\n\nlineSelection...,  electronEnergies..., energyShift..., maxKappa...,\ncalcRateCoefficient..., maxEnergyMultiplier..., numElectronEnergies..., temperatures...,\nprintBefore..., operator...)\n\n... constructor for modifying the given ImpactExcitation.Settings by 'overwriting' the previously selected parameters.\n\n\n\n\n\n","category":"method"},{"location":"types.html#JAC.ImpactExcitation.Settings-Tuple{}","page":"Types","title":"JAC.ImpactExcitation.Settings","text":"ImpactExcitation.Settings()  ... constructor for the default values of electron-impact excitation line computations.\n\n\n\n\n\n","category":"method"},{"location":"types.html#Photo-Emission","page":"Types","title":"Photo Emission","text":"","category":"section"},{"location":"types.html","page":"Types","title":"Types","text":"Modules = [PhotoEmission]\nOrder   = [:type]","category":"page"},{"location":"types.html#JAC.PhotoEmission.Channel","page":"Types","title":"JAC.PhotoEmission.Channel","text":"struct  PhotoEmission.Channel       ... defines a type for a single radiative emission/absorption channel that specifies the multipole, gauge and amplitude.\n\n+ multipole         ::EmMultipole        ... Multipole of the photon emission/absorption.\n+ gauge             ::EmGauge            ... Gauge for dealing with the (coupled) radiation field.\n+ amplitude         ::Complex{Float64}   ... Amplitude of this multiple channel.\n\n\n\n\n\n","category":"type"},{"location":"types.html#JAC.PhotoEmission.Line","page":"Types","title":"JAC.PhotoEmission.Line","text":"struct  PhotoEmission.Line       ... defines a type for a radiative line that may include the definition of sublines and their corresponding amplitudes.\n\n+ initialLevel   ::Level               ... initial-(state) level\n+ finalLevel     ::Level               ... final-(state) level\n+ omega          ::Float64             ... Transition frequency of this line; can be shifted w.r.t. the level energies.\n+ photonRate     ::EmProperty          ... Total rate of this line.\n+ angularBeta    ::EmProperty          ... Angular beta_2 coefficient.\n+ hasSublines    ::Bool                ... Determines whether the sublines are defined in terms of their multipolarity, amplitude, or not.\n+ channels       ::Array{PhotoEmission.Channel,1}  ... List of radiative (photon) channels\n\n\n\n\n\n","category":"type"},{"location":"types.html#JAC.PhotoEmission.Line-Tuple{Level, Level, Float64, JAC.Basics.EmProperty}","page":"Types","title":"JAC.PhotoEmission.Line","text":"PhotoEmission.Line(initialLevel::Level, finalLevel::Level, photonRate::Float64)       ... constructor an radiative line between a specified initial and final level.\n\n\n\n\n\n","category":"method"},{"location":"types.html#JAC.PhotoEmission.Settings","page":"Types","title":"JAC.PhotoEmission.Settings","text":"struct  PhotoEmission.Settings  <:  AbstractProcessSettings       ... defines a type for the details and parameters of computing radiative lines.\n\n+ multipoles              ::Array{EmMultipoles}     ... Specifies the (radiat. field) multipoles to be included.\n+ gauges                  ::Array{UseGauge}         ... Gauges to be included into the computations.\n+ calcAnisotropy          ::Bool                    ... True, if the anisotropy (structure) functions are to be \n                                                        calculated and false otherwise \n+ printBefore             ::Bool                    ... True, if all energies and lines are printed before comput.\n+ corePolarization        ::CorePolarization        ... Parametrization of the core-polarization potential/contribution.\n+ lineSelection           ::LineSelection           ... Specifies the selected levels, if any.\n+ photonEnergyShift       ::Float64                 ... An overall energy shift for all photon energies.\n+ mimimumPhotonEnergy     ::Float64                 ... minimum transition energy for which (photon) transitions \n                                                        are included into the computation.\n+ maximumPhotonEnergy     ::Float64                 ... maximum transition energy for which (photon) transitions \n                                                        are included.\n\n\n\n\n\n","category":"type"},{"location":"types.html#JAC.PhotoEmission.Settings-Tuple{JAC.PhotoEmission.Settings}","page":"Types","title":"JAC.PhotoEmission.Settings","text":"PhotoEmission.Settings(set::PhotoEmission.Settings;\n\n    multipoles::=..,        gauges=..,                calcAnisotropy=..,          printBefore=..,\n    corePolarization=..,    lineSelection=..,         photonEnergyShift=..,       \n    mimimumPhotonEnergy=.., maximumPhotonEnergy=..) \n                \n... constructor for modifying the given PhotoEmission.Settings by 'overwriting' the previously selected parameters.\n\n\n\n\n\n","category":"method"},{"location":"types.html#JAC.PhotoEmission.Settings-Tuple{}","page":"Types","title":"JAC.PhotoEmission.Settings","text":"PhotoEmission.Settings()  ... constructor for the default values of radiative line computations\n\n\n\n\n\n","category":"method"},{"location":"types.html#Photo-Excitation","page":"Types","title":"Photo Excitation","text":"","category":"section"},{"location":"types.html","page":"Types","title":"Types","text":"Modules = [PhotoExcitation]\nOrder   = [:type]","category":"page"},{"location":"types.html#JAC.PhotoExcitation.Line","page":"Types","title":"JAC.PhotoExcitation.Line","text":"struct  PhotoExcitation.Line       ... defines a type for a photo-excitation line that may include the definition of sublines and their          corresponding amplitudes.\n\n+ initialLevel   ::Level                       ... initial-(state) level\n+ finalLevel     ::Level                       ... final-(state) level\n+ omega          ::Float64                     ... Transition frequency of this line; can be shifted w.r.t. the level energies.\n+ oscStrength    ::EmProperty                  ... Absorption oscillator strength\n+ crossSection   ::EmProperty                  ... Total cross section of this line.\n+ staTensor      ::Array{TensorComp,1}         ... Array of statistical tensor components rho_kq\n+ hasSublines    ::Bool                        ... Determines whether the individual sublines are defined in terms of their \n                                                    multipolarity, amplitude, or not; cf. PhotoEmission.Channel\n+ channels       ::Array{PhotoEmission.Channel,1}  ... List of radiative (photon) channels\n\n\n\n\n\n","category":"type"},{"location":"types.html#JAC.PhotoExcitation.Line-Tuple{Level, Level, Float64, JAC.Basics.EmProperty}","page":"Types","title":"JAC.PhotoExcitation.Line","text":"PhotoExcitation.Line(initialLevel::Level, finalLevel::Level, omega::Float64, crossSection::EmProperty)       ... constructor an photo-excitation line between a specified initial and final level.\n\n\n\n\n\n","category":"method"},{"location":"types.html#JAC.PhotoExcitation.Settings","page":"Types","title":"JAC.PhotoExcitation.Settings","text":"struct  PhotoExcitation.Settings  <:  AbstractProcessSettings  ... defines a type for the details and parameters of computing photo-excitation  lines.\n\n+ multipoles              ::Array{EmMultipole,1}    ... Specifies the multipoles of the radiation field that are to be included.\n+ gauges                  ::Array{UseGauge,1}       ... Specifies the gauges to be included into the computations.\n+ calcForStokes           ::Bool                    ... True, if the excitation cross sections are to be calculated (and false otherwise)\n                                                        for given Stokes parameter of the incident plane-wave photons.\n+ calcPhotonDm            ::Bool                    ... True, if the photon density matrix of a subsequently emitted fluorescence photon \n                                                        is to be calculated and false otherwise. \n+ calcTensors             ::Bool                    ... True, if statistical tensors of the excited atom are to be calculated, false otherwise. \n+ printBefore             ::Bool                    ... True, if all energies and lines are printed before their evaluation.\n+ lineSelection           ::LineSelection           ... Specifies the selected levels, if any.\n+ photonEnergyShift       ::Float64                 ... An overall energy shift for all photon energies.\n+ mimimumPhotonEnergy     ::Float64                 ... minimum transition energy for which (photon) transitions are included into the\n                                                        computation.\n+ maximumPhotonEnergy     ::Float64                 ... maximum transition energy for which (photon) transitions are included.\n+ stokes                  ::ExpStokes               ... Stokes parameters of the incident radiation.\n\n\n\n\n\n","category":"type"},{"location":"types.html#JAC.PhotoExcitation.Settings-Tuple{JAC.PhotoExcitation.Settings}","page":"Types","title":"JAC.PhotoExcitation.Settings","text":"PhotoExcitation.Settings(set::PhotoExcitation.Settings;\n\n    multipoles=..,          gauges=..,                  calcForStokes=..,           calcPhotonDm=..,    \n    calcTensors=..,         printBefore=..,             lineSelection=..,    \n    photonEnergyShift=..,   mimimumPhotonEnergy=..,     maximumPhotonEnergy=..,     stokes=..)\n                \n... constructor for modifying the given PhotoExcitation.Settings by 'overwriting' the previously selected parameters.\n\n\n\n\n\n","category":"method"},{"location":"types.html#JAC.PhotoExcitation.Settings-Tuple{}","page":"Types","title":"JAC.PhotoExcitation.Settings","text":"PhotoExcitation.Settings()  ... 'empty' constructor for the default values of photo-excitation line computations\n\n\n\n\n\n","category":"method"},{"location":"types.html#Photo-Ionization","page":"Types","title":"Photo Ionization","text":"","category":"section"},{"location":"types.html","page":"Types","title":"Types","text":"Modules = [PhotoIonization]\nOrder   = [:type]","category":"page"},{"location":"types.html#JAC.PhotoIonization.Channel","page":"Types","title":"JAC.PhotoIonization.Channel","text":"struct  PhotoIonization.Channel       ... defines a type for a photoionization channel to help characterize a single multipole and scattering (continuum) state          of many electron-states with a single free electron.\n\n+ multipole      ::EmMultipole          ... Multipole of the photon absorption.\n+ gauge          ::EmGauge              ... Gauge for dealing with the (coupled) radiation field.\n+ kappa          ::Int64                ... partial-wave of the free electron\n+ symmetry       ::LevelSymmetry        ... total angular momentum and parity of the scattering state\n+ phase          ::Float64              ... phase of the partial wave\n+ amplitude      ::Complex{Float64}     ... Photoionization amplitude associated with the given channel.\n\n\n\n\n\n","category":"type"},{"location":"types.html#JAC.PhotoIonization.Line","page":"Types","title":"JAC.PhotoIonization.Line","text":"struct  Line  ... defines a type for a photoionization line that may include the definition of channels.\n\n+ initialLevel   ::Level                  ... initial-(state) level\n+ finalLevel     ::Level                  ... final-(state) level\n+ electronEnergy ::Float64                ... Energy of the (outgoing free) electron.\n+ photonEnergy   ::Float64                ... Energy of the absorbed photon.\n+ crossSection   ::EmProperty             ... Cross section for this photoionization.\n+ angularBeta    ::EmProperty             ... beta -parameter for unpolarized targets with J=0, 1/2, 1\n+ coherentDelay  ::EmProperty             ... coherent time-delay due to the selected averaging of phases.\n+ incoherentDelay::EmProperty             ... incoherent time-delay due to the selected averaging of phases.\n+ channels       ::Array{PhotoIonization.Channel,1}  ... List of PhotoIonization.Channels of this line.\n\n\n\n\n\n","category":"type"},{"location":"types.html#JAC.PhotoIonization.Line-Tuple{Level, Level, JAC.Basics.EmProperty}","page":"Types","title":"JAC.PhotoIonization.Line","text":"PhotoIonization.Line(initialLevel::Level, finalLevel::Level, crossSection::Float64)       ... constructor for an photoionization line between a specified initial and final level.\n\n\n\n\n\n","category":"method"},{"location":"types.html#JAC.PhotoIonization.PlasmaSettings","page":"Types","title":"JAC.PhotoIonization.PlasmaSettings","text":"struct  PhotoIonization.PlasmaSettings  <:  Basics.AbstractLineShiftSettings       ... defines a type for the details and parameters of computing photoionization rates with plasma interactions.\n\n+ multipoles             ::Array{Basics.EmMultipole}     ... Specifies the multipoles of the radiation field that are to be included.\n+ gauges                 ::Array{Basics.UseGauge}        ... Specifies the gauges to be included into the computations.\n+ photonEnergies         ::Array{Float64,1}              ... List of photon energies.  \n+ printBefore            ::Bool                          ... True, if all energies and lines are printed before their evaluation.\n+ lineSelection          ::LineSelection                 ... Specifies the selected levels, if any.\n\n\n\n\n\n","category":"type"},{"location":"types.html#JAC.PhotoIonization.PlasmaSettings-Tuple{}","page":"Types","title":"JAC.PhotoIonization.PlasmaSettings","text":"PhotoIonization.PlasmaSettings()  ... constructor for a standard instance of PhotoIonization.PlasmaSettings.\n\n\n\n\n\n","category":"method"},{"location":"types.html#JAC.PhotoIonization.Settings","page":"Types","title":"JAC.PhotoIonization.Settings","text":"struct  PhotoIonization.Settings  <:  AbstractProcessSettings  ... defines a type for the details and parameters of computing photoionization lines.\n\n+ multipoles                    ::Array{EmMultipole}  ... Specifies the multipoles of the radiation field that are to be included.\n+ gauges                        ::Array{UseGauge}     ... Specifies the gauges to be included into the computations.\n+ photonEnergies                ::Array{Float64,1}    ... List of photon energies [in user-selected units].  \n+ electronEnergies              ::Array{Float64,1}    ... List of electron energies; usually only one of these lists are utilized. \n+ thetas                        ::Array{Float64,1}    ... List of theta-values if angle-differential CS are calculated explicitly. \n+ calcAnisotropy                ::Bool                ... True, if the beta anisotropy parameters are to be calculated and false otherwise (o/w). \n+ calcPartialCs                 ::Bool                ... True, if partial cross sections are to be calculated and false otherwise.  \n+ calcTimeDelay                 ::Bool                ... True, if time-delays are to be calculated and false otherwise.  \n+ calcNonE1AngleDifferentialCS  ::Bool                ... True, if non-E1 angle-differential CS are be calculated and false otherwise.  \n+ calcTensors                   ::Bool                ... True, if statistical tensors of the excited atom are to be calculated and false o/w. \n+ printBefore                   ::Bool                ... True, if all energies and lines are printed before their evaluation.\n+ lineSelection                 ::LineSelection       ... Specifies the selected levels, if any.\n+ stokes                        ::ExpStokes           ... Stokes parameters of the incident radiation.\n+ freeElectronShift             ::Float64             ... An overall energy shift of all free-electron energies [user-specified units].\n+ lValues                       ::Array{Int64,1}      ... Orbital angular momentum of free-electrons, for which partial waves are considered.\n\n\n\n\n\n","category":"type"},{"location":"types.html#JAC.PhotoIonization.Settings-Tuple{JAC.PhotoIonization.Settings}","page":"Types","title":"JAC.PhotoIonization.Settings","text":"PhotoIonization.Settings(set::PhotoIonization.Settings;\n\n    multipoles=..,                      gauges=..,                  photonEnergies=..,          electronEnergies=..,     \n    thetas=..,                          calcAnisotropy=..,          calcPartialCs..,            calcTimeDelay=..,           \n    calcNonE1AngleDifferentialCS=..,    calcTensors=..,             printBefore=..,             lineSelection=..,           \n    stokes=..,                          freeElectronShift=..,       lValues=.. )\n                \n... constructor for modifying the given PhotoIonization.Settings by 'overwriting' the previously selected parameters.\n\n\n\n\n\n","category":"method"},{"location":"types.html#JAC.PhotoIonization.Settings-Tuple{}","page":"Types","title":"JAC.PhotoIonization.Settings","text":"PhotoIonization.Settings()  ... constructor for the default values of photoionization line computations\n\n\n\n\n\n","category":"method"},{"location":"types.html#Photo-Recombination","page":"Types","title":"Photo Recombination","text":"","category":"section"},{"location":"types.html","page":"Types","title":"Types","text":"Modules = [PhotoRecombination]\nOrder   = [:type]","category":"page"},{"location":"types.html#JAC.PhotoRecombination.Channel","page":"Types","title":"JAC.PhotoRecombination.Channel","text":"struct  PhotoRecombination.Channel       ... defines a type for a photorecombination channel to help characterize a single multipole and scattering          (continuum) state of many electron-states with a single free electron.\n\n+ multipole      ::EmMultipole          ... Multipole of the photon emission/absorption.\n+ gauge          ::EmGauge              ... Gauge for dealing with the (coupled) radiation field.\n+ kappa          ::Int64                ... partial-wave of the free electron\n+ symmetry       ::LevelSymmetry        ... total angular momentum and parity of the scattering state\n+ phase          ::Float64              ... phase of the partial wave\n+ amplitude      ::Complex{Float64}     ... Rec amplitude associated with the given channel.\n\n\n\n\n\n","category":"type"},{"location":"types.html#JAC.PhotoRecombination.Line","page":"Types","title":"JAC.PhotoRecombination.Line","text":"struct  PhotoRecombination.Line       ... defines a type for a Photorecombination line that may include the definition of channels.\n\n+ initialLevel   ::Level                  ... initial-(state) level\n+ finalLevel     ::Level                  ... final-(state) level\n+ electronEnergy ::Float64                ... Energy of the (incoming free) electron.\n+ photonEnergy   ::Float64                ... Energy of the emitted photon.\n+ betaGamma2     ::Float64                ... beta^2 * gamma^2.\n+ weight         ::Float64                ... weight of line in the integration over electron energies.\n+ crossSection   ::EmProperty             ... Cross section for this electron capture.\n+ channels       ::Array{PhotoRecombination.Channel,1}    ... List of photorecombination channels of this line.\n\n\n\n\n\n","category":"type"},{"location":"types.html#JAC.PhotoRecombination.Line-Tuple{Level, Level}","page":"Types","title":"JAC.PhotoRecombination.Line","text":"PhotoRecombination.Line()       ... constructor for an empty instance of a photorecombination line between a specified initial          and final level.\n\n\n\n\n\n","category":"method"},{"location":"types.html#JAC.PhotoRecombination.Settings","page":"Types","title":"JAC.PhotoRecombination.Settings","text":"struct  PhotoRecombination.Settings  <:  AbstractProcessSettings ... defines a type for the details and parameters of computing photo recombination lines.\n\n+ multipoles          ::Array{EmMultipole}  ... Multipoles of the radiation field that are to be included.\n+ gauges              ::Array{UseGauge}     ... Gauges to be included into the computations.\n+ electronEnergies    ::Array{Float64,1}    ... List of electron energies [in default units].\n+ ionEnergies         ::Array{Float64,1}    ... List of ion energies [in MeV/u].\n+ useIonEnergies      ::Bool                ... Make use of ion energies in [MeV/u] to obtain the electron energies.\n+ calcTotalCs         ::Bool                ... True, if the total cross sections is to be calculated/displayed for all initial levels.\n+ calcAnisotropy      ::Bool                ... True, if the overall anisotropy is to be calculated.\n+ calcTensors         ::Bool                ... True, if the statistical tensors are to be calculated and \n                                                false otherwise.\n+ printBefore         ::Bool                ... True, if all energies and lines are printed before their evaluation.\n+ maxKappa            ::Int64               ... Maximum kappa value of partial waves to be included.\n+ lineSelection       ::LineSelection       ... Specifies the selected levels, if any.\n\n\n\n\n\n","category":"type"},{"location":"types.html#JAC.PhotoRecombination.Settings-Tuple{JAC.PhotoRecombination.Settings}","page":"Types","title":"JAC.PhotoRecombination.Settings","text":"PhotoRecombination.Settings(set::PhotoRecombination..Settings;\n\n    multipoles=..,          gauges=..,              electronEnergies=..,          ionEnergies=..,     \n    useIonEnergies=..,      calcTotalCs..,          calcAnisotropy=..,            calcTensors=..,             \n    printBefore=..,         maxKappa=..,            lineSelection=..)\n                \n... constructor for modifying the given PhotoRecombination..Settings by 'overwriting' the previously selected parameters.\n\n\n\n\n\n","category":"method"},{"location":"types.html#JAC.PhotoRecombination.Settings-Tuple{}","page":"Types","title":"JAC.PhotoRecombination.Settings","text":"PhotoRecombination.Settings()  ... constructor for the default values of photo recombination line computations\n\n\n\n\n\n","category":"method"}]
}
